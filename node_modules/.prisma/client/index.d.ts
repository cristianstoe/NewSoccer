
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model League
 * 
 */
export type League = $Result.DefaultSelection<Prisma.$LeaguePayload>
/**
 * Model Season
 * 
 */
export type Season = $Result.DefaultSelection<Prisma.$SeasonPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Coach
 * 
 */
export type Coach = $Result.DefaultSelection<Prisma.$CoachPayload>
/**
 * Model Stadium
 * 
 */
export type Stadium = $Result.DefaultSelection<Prisma.$StadiumPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Statistic
 * 
 */
export type Statistic = $Result.DefaultSelection<Prisma.$StatisticPayload>
/**
 * Model Fixture
 * 
 */
export type Fixture = $Result.DefaultSelection<Prisma.$FixturePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Countries
 * const countries = await prisma.country.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Countries
   * const countries = await prisma.country.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs>;

  /**
   * `prisma.league`: Exposes CRUD operations for the **League** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.league.findMany()
    * ```
    */
  get league(): Prisma.LeagueDelegate<ExtArgs>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.SeasonDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.coach`: Exposes CRUD operations for the **Coach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coaches
    * const coaches = await prisma.coach.findMany()
    * ```
    */
  get coach(): Prisma.CoachDelegate<ExtArgs>;

  /**
   * `prisma.stadium`: Exposes CRUD operations for the **Stadium** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stadiums
    * const stadiums = await prisma.stadium.findMany()
    * ```
    */
  get stadium(): Prisma.StadiumDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.statistic`: Exposes CRUD operations for the **Statistic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statistics
    * const statistics = await prisma.statistic.findMany()
    * ```
    */
  get statistic(): Prisma.StatisticDelegate<ExtArgs>;

  /**
   * `prisma.fixture`: Exposes CRUD operations for the **Fixture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fixtures
    * const fixtures = await prisma.fixture.findMany()
    * ```
    */
  get fixture(): Prisma.FixtureDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Country: 'Country',
    League: 'League',
    Season: 'Season',
    Team: 'Team',
    Coach: 'Coach',
    Stadium: 'Stadium',
    Player: 'Player',
    Statistic: 'Statistic',
    Fixture: 'Fixture'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'country' | 'league' | 'season' | 'team' | 'coach' | 'stadium' | 'player' | 'statistic' | 'fixture'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>,
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      League: {
        payload: Prisma.$LeaguePayload<ExtArgs>
        fields: Prisma.LeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findFirst: {
            args: Prisma.LeagueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findMany: {
            args: Prisma.LeagueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          create: {
            args: Prisma.LeagueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          createMany: {
            args: Prisma.LeagueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          delete: {
            args: Prisma.LeagueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          update: {
            args: Prisma.LeagueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          deleteMany: {
            args: Prisma.LeagueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LeagueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          aggregate: {
            args: Prisma.LeagueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLeague>
          }
          groupBy: {
            args: Prisma.LeagueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueCountArgs<ExtArgs>,
            result: $Utils.Optional<LeagueCountAggregateOutputType> | number
          }
        }
      }
      Season: {
        payload: Prisma.$SeasonPayload<ExtArgs>
        fields: Prisma.SeasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeasonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findFirst: {
            args: Prisma.SeasonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findMany: {
            args: Prisma.SeasonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          create: {
            args: Prisma.SeasonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          createMany: {
            args: Prisma.SeasonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeasonCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          delete: {
            args: Prisma.SeasonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          update: {
            args: Prisma.SeasonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          deleteMany: {
            args: Prisma.SeasonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SeasonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.SeasonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonCountArgs<ExtArgs>,
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>,
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Coach: {
        payload: Prisma.$CoachPayload<ExtArgs>
        fields: Prisma.CoachFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoachFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoachFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findFirst: {
            args: Prisma.CoachFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoachFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          findMany: {
            args: Prisma.CoachFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>[]
          }
          create: {
            args: Prisma.CoachCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          createMany: {
            args: Prisma.CoachCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoachCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>[]
          }
          delete: {
            args: Prisma.CoachDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          update: {
            args: Prisma.CoachUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          deleteMany: {
            args: Prisma.CoachDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoachUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoachUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoachPayload>
          }
          aggregate: {
            args: Prisma.CoachAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoach>
          }
          groupBy: {
            args: Prisma.CoachGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoachGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoachCountArgs<ExtArgs>,
            result: $Utils.Optional<CoachCountAggregateOutputType> | number
          }
        }
      }
      Stadium: {
        payload: Prisma.$StadiumPayload<ExtArgs>
        fields: Prisma.StadiumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StadiumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StadiumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          findFirst: {
            args: Prisma.StadiumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StadiumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          findMany: {
            args: Prisma.StadiumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>[]
          }
          create: {
            args: Prisma.StadiumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          createMany: {
            args: Prisma.StadiumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StadiumCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>[]
          }
          delete: {
            args: Prisma.StadiumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          update: {
            args: Prisma.StadiumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          deleteMany: {
            args: Prisma.StadiumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StadiumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StadiumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StadiumPayload>
          }
          aggregate: {
            args: Prisma.StadiumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStadium>
          }
          groupBy: {
            args: Prisma.StadiumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StadiumGroupByOutputType>[]
          }
          count: {
            args: Prisma.StadiumCountArgs<ExtArgs>,
            result: $Utils.Optional<StadiumCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>,
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Statistic: {
        payload: Prisma.$StatisticPayload<ExtArgs>
        fields: Prisma.StatisticFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatisticFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatisticFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          findFirst: {
            args: Prisma.StatisticFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatisticFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          findMany: {
            args: Prisma.StatisticFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>[]
          }
          create: {
            args: Prisma.StatisticCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          createMany: {
            args: Prisma.StatisticCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatisticCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>[]
          }
          delete: {
            args: Prisma.StatisticDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          update: {
            args: Prisma.StatisticUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          deleteMany: {
            args: Prisma.StatisticDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatisticUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatisticUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticPayload>
          }
          aggregate: {
            args: Prisma.StatisticAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatistic>
          }
          groupBy: {
            args: Prisma.StatisticGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatisticGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatisticCountArgs<ExtArgs>,
            result: $Utils.Optional<StatisticCountAggregateOutputType> | number
          }
        }
      }
      Fixture: {
        payload: Prisma.$FixturePayload<ExtArgs>
        fields: Prisma.FixtureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FixtureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FixtureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          findFirst: {
            args: Prisma.FixtureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FixtureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          findMany: {
            args: Prisma.FixtureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>[]
          }
          create: {
            args: Prisma.FixtureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          createMany: {
            args: Prisma.FixtureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FixtureCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>[]
          }
          delete: {
            args: Prisma.FixtureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          update: {
            args: Prisma.FixtureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          deleteMany: {
            args: Prisma.FixtureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FixtureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FixtureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FixturePayload>
          }
          aggregate: {
            args: Prisma.FixtureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFixture>
          }
          groupBy: {
            args: Prisma.FixtureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FixtureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FixtureCountArgs<ExtArgs>,
            result: $Utils.Optional<FixtureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    leagues: number
    teams: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | CountryCountOutputTypeCountLeaguesArgs
    teams?: boolean | CountryCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type LeagueCountOutputType
   */

  export type LeagueCountOutputType = {
    seasons: number
    fixtures: number
  }

  export type LeagueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seasons?: boolean | LeagueCountOutputTypeCountSeasonsArgs
    fixtures?: boolean | LeagueCountOutputTypeCountFixturesArgs
  }

  // Custom InputTypes
  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueCountOutputType
     */
    select?: LeagueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountSeasonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
  }


  /**
   * Count Type SeasonCountOutputType
   */

  export type SeasonCountOutputType = {
    statistics: number
    fixtures: number
  }

  export type SeasonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statistics?: boolean | SeasonCountOutputTypeCountStatisticsArgs
    fixtures?: boolean | SeasonCountOutputTypeCountFixturesArgs
  }

  // Custom InputTypes
  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonCountOutputType
     */
    select?: SeasonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountStatisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatisticWhereInput
  }

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    players: number
    homeFixtures: number
    awayFixtures: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | TeamCountOutputTypeCountPlayersArgs
    homeFixtures?: boolean | TeamCountOutputTypeCountHomeFixturesArgs
    awayFixtures?: boolean | TeamCountOutputTypeCountAwayFixturesArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountHomeFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountAwayFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
  }


  /**
   * Count Type StadiumCountOutputType
   */

  export type StadiumCountOutputType = {
    teams: number
    fixtures: number
  }

  export type StadiumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | StadiumCountOutputTypeCountTeamsArgs
    fixtures?: boolean | StadiumCountOutputTypeCountFixturesArgs
  }

  // Custom InputTypes
  /**
   * StadiumCountOutputType without action
   */
  export type StadiumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StadiumCountOutputType
     */
    select?: StadiumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StadiumCountOutputType without action
   */
  export type StadiumCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * StadiumCountOutputType without action
   */
  export type StadiumCountOutputTypeCountFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    statistics: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    statistics?: boolean | PlayerCountOutputTypeCountStatisticsArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountStatisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatisticWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flag: string | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    flag: string | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    flag: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flag?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flag?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    flag?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    name: string
    code: string | null
    flag: string | null
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    flag?: boolean
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    teams?: boolean | Country$teamsArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    flag?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    flag?: boolean
  }

  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    teams?: boolean | Country$teamsArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string | null
      flag: string | null
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends CountryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryCreateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CountryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends CountryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends CountryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    leagues<T extends Country$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Country$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findMany'> | Null>;

    teams<T extends Country$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Country$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly name: FieldRef<"Country", 'String'>
    readonly code: FieldRef<"Country", 'String'>
    readonly flag: FieldRef<"Country", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }

  /**
   * Country.leagues
   */
  export type Country$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Country.teams
   */
  export type Country$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model League
   */

  export type AggregateLeague = {
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  export type LeagueAvgAggregateOutputType = {
    id: number | null
    countryId: number | null
  }

  export type LeagueSumAggregateOutputType = {
    id: number | null
    countryId: number | null
  }

  export type LeagueMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    logo: string | null
    countryId: number | null
  }

  export type LeagueMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    logo: string | null
    countryId: number | null
  }

  export type LeagueCountAggregateOutputType = {
    id: number
    name: number
    type: number
    logo: number
    countryId: number
    _all: number
  }


  export type LeagueAvgAggregateInputType = {
    id?: true
    countryId?: true
  }

  export type LeagueSumAggregateInputType = {
    id?: true
    countryId?: true
  }

  export type LeagueMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    logo?: true
    countryId?: true
  }

  export type LeagueMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    logo?: true
    countryId?: true
  }

  export type LeagueCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    logo?: true
    countryId?: true
    _all?: true
  }

  export type LeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which League to aggregate.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeagueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeagueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMaxAggregateInputType
  }

  export type GetLeagueAggregateType<T extends LeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeague[P]>
      : GetScalarType<T[P], AggregateLeague[P]>
  }




  export type LeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithAggregationInput | LeagueOrderByWithAggregationInput[]
    by: LeagueScalarFieldEnum[] | LeagueScalarFieldEnum
    having?: LeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueCountAggregateInputType | true
    _avg?: LeagueAvgAggregateInputType
    _sum?: LeagueSumAggregateInputType
    _min?: LeagueMinAggregateInputType
    _max?: LeagueMaxAggregateInputType
  }

  export type LeagueGroupByOutputType = {
    id: number
    name: string
    type: string
    logo: string | null
    countryId: number
    _count: LeagueCountAggregateOutputType | null
    _avg: LeagueAvgAggregateOutputType | null
    _sum: LeagueSumAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  type GetLeagueGroupByPayload<T extends LeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    logo?: boolean
    countryId?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    seasons?: boolean | League$seasonsArgs<ExtArgs>
    fixtures?: boolean | League$fixturesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    logo?: boolean
    countryId?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    logo?: boolean
    countryId?: boolean
  }

  export type LeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    seasons?: boolean | League$seasonsArgs<ExtArgs>
    fixtures?: boolean | League$fixturesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $LeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "League"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      seasons: Prisma.$SeasonPayload<ExtArgs>[]
      fixtures: Prisma.$FixturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      logo: string | null
      countryId: number
    }, ExtArgs["result"]["league"]>
    composites: {}
  }

  type LeagueGetPayload<S extends boolean | null | undefined | LeagueDefaultArgs> = $Result.GetResult<Prisma.$LeaguePayload, S>

  type LeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeagueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeagueCountAggregateInputType | true
    }

  export interface LeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['League'], meta: { name: 'League' } }
    /**
     * Find zero or one League that matches the filter.
     * @param {LeagueFindUniqueArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LeagueFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueFindUniqueArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one League that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeagueFindUniqueOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LeagueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first League that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LeagueFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueFindFirstArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first League that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LeagueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.league.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.league.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueWithIdOnly = await prisma.league.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LeagueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a League.
     * @param {LeagueCreateArgs} args - Arguments to create a League.
     * @example
     * // Create one League
     * const League = await prisma.league.create({
     *   data: {
     *     // ... data to create a League
     *   }
     * })
     * 
    **/
    create<T extends LeagueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueCreateArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Leagues.
     * @param {LeagueCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LeagueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeagueCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends LeagueCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a League.
     * @param {LeagueDeleteArgs} args - Arguments to delete one League.
     * @example
     * // Delete one League
     * const League = await prisma.league.delete({
     *   where: {
     *     // ... filter to delete one League
     *   }
     * })
     * 
    **/
    delete<T extends LeagueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueDeleteArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one League.
     * @param {LeagueUpdateArgs} args - Arguments to update one League.
     * @example
     * // Update one League
     * const league = await prisma.league.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LeagueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueUpdateArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Leagues.
     * @param {LeagueDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.league.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LeagueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeagueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LeagueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one League.
     * @param {LeagueUpsertArgs} args - Arguments to update or create a League.
     * @example
     * // Update or create a League
     * const league = await prisma.league.upsert({
     *   create: {
     *     // ... data to create a League
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the League we want to update
     *   }
     * })
    **/
    upsert<T extends LeagueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LeagueUpsertArgs<ExtArgs>>
    ): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.league.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeagueCountArgs>(
      args?: Subset<T, LeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueAggregateArgs>(args: Subset<T, LeagueAggregateArgs>): Prisma.PrismaPromise<GetLeagueAggregateType<T>>

    /**
     * Group by League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueGroupByArgs['orderBy'] }
        : { orderBy?: LeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the League model
   */
  readonly fields: LeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for League.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    seasons<T extends League$seasonsArgs<ExtArgs> = {}>(args?: Subset<T, League$seasonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findMany'> | Null>;

    fixtures<T extends League$fixturesArgs<ExtArgs> = {}>(args?: Subset<T, League$fixturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the League model
   */ 
  interface LeagueFieldRefs {
    readonly id: FieldRef<"League", 'Int'>
    readonly name: FieldRef<"League", 'String'>
    readonly type: FieldRef<"League", 'String'>
    readonly logo: FieldRef<"League", 'String'>
    readonly countryId: FieldRef<"League", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * League findUnique
   */
  export type LeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findUniqueOrThrow
   */
  export type LeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findFirst
   */
  export type LeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findFirstOrThrow
   */
  export type LeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findMany
   */
  export type LeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League create
   */
  export type LeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a League.
     */
    data: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
  }

  /**
   * League createMany
   */
  export type LeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * League createManyAndReturn
   */
  export type LeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * League update
   */
  export type LeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a League.
     */
    data: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
    /**
     * Choose, which League to update.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League updateMany
   */
  export type LeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
  }

  /**
   * League upsert
   */
  export type LeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the League to update in case it exists.
     */
    where: LeagueWhereUniqueInput
    /**
     * In case the League found by the `where` argument doesn't exist, create a new League with this data.
     */
    create: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
    /**
     * In case the League was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
  }

  /**
   * League delete
   */
  export type LeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter which League to delete.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League deleteMany
   */
  export type LeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeagueWhereInput
  }

  /**
   * League.seasons
   */
  export type League$seasonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    cursor?: SeasonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * League.fixtures
   */
  export type League$fixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    cursor?: FixtureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * League without action
   */
  export type LeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
  }


  /**
   * Model Season
   */

  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonAvgAggregateOutputType = {
    id: number | null
    year: number | null
    leagueId: number | null
  }

  export type SeasonSumAggregateOutputType = {
    id: number | null
    year: number | null
    leagueId: number | null
  }

  export type SeasonMinAggregateOutputType = {
    id: number | null
    year: number | null
    start: Date | null
    end: Date | null
    current: boolean | null
    leagueId: number | null
  }

  export type SeasonMaxAggregateOutputType = {
    id: number | null
    year: number | null
    start: Date | null
    end: Date | null
    current: boolean | null
    leagueId: number | null
  }

  export type SeasonCountAggregateOutputType = {
    id: number
    year: number
    start: number
    end: number
    current: number
    leagueId: number
    _all: number
  }


  export type SeasonAvgAggregateInputType = {
    id?: true
    year?: true
    leagueId?: true
  }

  export type SeasonSumAggregateInputType = {
    id?: true
    year?: true
    leagueId?: true
  }

  export type SeasonMinAggregateInputType = {
    id?: true
    year?: true
    start?: true
    end?: true
    current?: true
    leagueId?: true
  }

  export type SeasonMaxAggregateInputType = {
    id?: true
    year?: true
    start?: true
    end?: true
    current?: true
    leagueId?: true
  }

  export type SeasonCountAggregateInputType = {
    id?: true
    year?: true
    start?: true
    end?: true
    current?: true
    leagueId?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Season to aggregate.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type SeasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithAggregationInput | SeasonOrderByWithAggregationInput[]
    by: SeasonScalarFieldEnum[] | SeasonScalarFieldEnum
    having?: SeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _avg?: SeasonAvgAggregateInputType
    _sum?: SeasonSumAggregateInputType
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }

  export type SeasonGroupByOutputType = {
    id: number
    year: number
    start: Date
    end: Date
    current: boolean
    leagueId: number
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type SeasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    start?: boolean
    end?: boolean
    current?: boolean
    leagueId?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    statistics?: boolean | Season$statisticsArgs<ExtArgs>
    fixtures?: boolean | Season$fixturesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    start?: boolean
    end?: boolean
    current?: boolean
    leagueId?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectScalar = {
    id?: boolean
    year?: boolean
    start?: boolean
    end?: boolean
    current?: boolean
    leagueId?: boolean
  }

  export type SeasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    statistics?: boolean | Season$statisticsArgs<ExtArgs>
    fixtures?: boolean | Season$fixturesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }

  export type $SeasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Season"
    objects: {
      league: Prisma.$LeaguePayload<ExtArgs>
      statistics: Prisma.$StatisticPayload<ExtArgs>[]
      fixtures: Prisma.$FixturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      year: number
      start: Date
      end: Date
      current: boolean
      leagueId: number
    }, ExtArgs["result"]["season"]>
    composites: {}
  }

  type SeasonGetPayload<S extends boolean | null | undefined | SeasonDefaultArgs> = $Result.GetResult<Prisma.$SeasonPayload, S>

  type SeasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeasonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface SeasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeasonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Season that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeasonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Season that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeasonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Season.
     * @param {SeasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
    **/
    create<T extends SeasonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonCreateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Seasons.
     * @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SeasonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seasons and returns the data saved in the database.
     * @param {SeasonCreateManyAndReturnArgs} args - Arguments to create many Seasons.
     * @example
     * // Create many Seasons
     * const season = await prisma.season.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seasons and only return the `id`
     * const seasonWithIdOnly = await prisma.season.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends SeasonCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Season.
     * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
    **/
    delete<T extends SeasonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonDeleteArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Season.
     * @param {SeasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeasonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Seasons.
     * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeasonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeasonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
    **/
    upsert<T extends SeasonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpsertArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends SeasonCountArgs>(
      args?: Subset<T, SeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonGroupByArgs['orderBy'] }
        : { orderBy?: SeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Season model
   */
  readonly fields: SeasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    statistics<T extends Season$statisticsArgs<ExtArgs> = {}>(args?: Subset<T, Season$statisticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findMany'> | Null>;

    fixtures<T extends Season$fixturesArgs<ExtArgs> = {}>(args?: Subset<T, Season$fixturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Season model
   */ 
  interface SeasonFieldRefs {
    readonly id: FieldRef<"Season", 'Int'>
    readonly year: FieldRef<"Season", 'Int'>
    readonly start: FieldRef<"Season", 'DateTime'>
    readonly end: FieldRef<"Season", 'DateTime'>
    readonly current: FieldRef<"Season", 'Boolean'>
    readonly leagueId: FieldRef<"Season", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Season findUnique
   */
  export type SeasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findUniqueOrThrow
   */
  export type SeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season findFirst
   */
  export type SeasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findFirstOrThrow
   */
  export type SeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season findMany
   */
  export type SeasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Seasons to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }

  /**
   * Season create
   */
  export type SeasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a Season.
     */
    data: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
  }

  /**
   * Season createMany
   */
  export type SeasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Season createManyAndReturn
   */
  export type SeasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Season update
   */
  export type SeasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a Season.
     */
    data: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
    /**
     * Choose, which Season to update.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season updateMany
   */
  export type SeasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seasons.
     */
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyInput>
    /**
     * Filter which Seasons to update
     */
    where?: SeasonWhereInput
  }

  /**
   * Season upsert
   */
  export type SeasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the Season to update in case it exists.
     */
    where: SeasonWhereUniqueInput
    /**
     * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
     */
    create: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
    /**
     * In case the Season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
  }

  /**
   * Season delete
   */
  export type SeasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter which Season to delete.
     */
    where: SeasonWhereUniqueInput
  }

  /**
   * Season deleteMany
   */
  export type SeasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seasons to delete
     */
    where?: SeasonWhereInput
  }

  /**
   * Season.statistics
   */
  export type Season$statisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    where?: StatisticWhereInput
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    cursor?: StatisticWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Season.fixtures
   */
  export type Season$fixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    cursor?: FixtureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Season without action
   */
  export type SeasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeasonInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    countryId: number | null
    stadiumId: number | null
    coachId: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    countryId: number | null
    stadiumId: number | null
    coachId: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    countryId: number | null
    stadiumId: number | null
    coachId: number | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    countryId: number | null
    stadiumId: number | null
    coachId: number | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    countryId: number
    stadiumId: number
    coachId: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    countryId?: true
    stadiumId?: true
    coachId?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    countryId?: true
    stadiumId?: true
    coachId?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    countryId?: true
    stadiumId?: true
    coachId?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    countryId?: true
    stadiumId?: true
    coachId?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    countryId?: true
    stadiumId?: true
    coachId?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    logo: string | null
    countryId: number
    stadiumId: number | null
    coachId: number | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    countryId?: boolean
    stadiumId?: boolean
    coachId?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    stadium?: boolean | Team$stadiumArgs<ExtArgs>
    players?: boolean | Team$playersArgs<ExtArgs>
    coach?: boolean | Team$coachArgs<ExtArgs>
    homeFixtures?: boolean | Team$homeFixturesArgs<ExtArgs>
    awayFixtures?: boolean | Team$awayFixturesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    countryId?: boolean
    stadiumId?: boolean
    coachId?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    stadium?: boolean | Team$stadiumArgs<ExtArgs>
    coach?: boolean | Team$coachArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    countryId?: boolean
    stadiumId?: boolean
    coachId?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    stadium?: boolean | Team$stadiumArgs<ExtArgs>
    players?: boolean | Team$playersArgs<ExtArgs>
    coach?: boolean | Team$coachArgs<ExtArgs>
    homeFixtures?: boolean | Team$homeFixturesArgs<ExtArgs>
    awayFixtures?: boolean | Team$awayFixturesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    stadium?: boolean | Team$stadiumArgs<ExtArgs>
    coach?: boolean | Team$coachArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      stadium: Prisma.$StadiumPayload<ExtArgs> | null
      players: Prisma.$PlayerPayload<ExtArgs>[]
      coach: Prisma.$CoachPayload<ExtArgs> | null
      homeFixtures: Prisma.$FixturePayload<ExtArgs>[]
      awayFixtures: Prisma.$FixturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      logo: string | null
      countryId: number
      stadiumId: number | null
      coachId: number | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamCreateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>
    ): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    stadium<T extends Team$stadiumArgs<ExtArgs> = {}>(args?: Subset<T, Team$stadiumArgs<ExtArgs>>): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    players<T extends Team$playersArgs<ExtArgs> = {}>(args?: Subset<T, Team$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    coach<T extends Team$coachArgs<ExtArgs> = {}>(args?: Subset<T, Team$coachArgs<ExtArgs>>): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    homeFixtures<T extends Team$homeFixturesArgs<ExtArgs> = {}>(args?: Subset<T, Team$homeFixturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'> | Null>;

    awayFixtures<T extends Team$awayFixturesArgs<ExtArgs> = {}>(args?: Subset<T, Team$awayFixturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly logo: FieldRef<"Team", 'String'>
    readonly countryId: FieldRef<"Team", 'Int'>
    readonly stadiumId: FieldRef<"Team", 'Int'>
    readonly coachId: FieldRef<"Team", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.stadium
   */
  export type Team$stadiumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    where?: StadiumWhereInput
  }

  /**
   * Team.players
   */
  export type Team$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Team.coach
   */
  export type Team$coachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    where?: CoachWhereInput
  }

  /**
   * Team.homeFixtures
   */
  export type Team$homeFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    cursor?: FixtureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Team.awayFixtures
   */
  export type Team$awayFixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    cursor?: FixtureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Coach
   */

  export type AggregateCoach = {
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  export type CoachAvgAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type CoachSumAggregateOutputType = {
    id: number | null
    teamId: number | null
  }

  export type CoachMinAggregateOutputType = {
    id: number | null
    name: string | null
    nationality: string | null
    teamId: number | null
  }

  export type CoachMaxAggregateOutputType = {
    id: number | null
    name: string | null
    nationality: string | null
    teamId: number | null
  }

  export type CoachCountAggregateOutputType = {
    id: number
    name: number
    nationality: number
    teamId: number
    _all: number
  }


  export type CoachAvgAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type CoachSumAggregateInputType = {
    id?: true
    teamId?: true
  }

  export type CoachMinAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    teamId?: true
  }

  export type CoachMaxAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    teamId?: true
  }

  export type CoachCountAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    teamId?: true
    _all?: true
  }

  export type CoachAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coach to aggregate.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coaches
    **/
    _count?: true | CoachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoachAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoachSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoachMaxAggregateInputType
  }

  export type GetCoachAggregateType<T extends CoachAggregateArgs> = {
        [P in keyof T & keyof AggregateCoach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoach[P]>
      : GetScalarType<T[P], AggregateCoach[P]>
  }




  export type CoachGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoachWhereInput
    orderBy?: CoachOrderByWithAggregationInput | CoachOrderByWithAggregationInput[]
    by: CoachScalarFieldEnum[] | CoachScalarFieldEnum
    having?: CoachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoachCountAggregateInputType | true
    _avg?: CoachAvgAggregateInputType
    _sum?: CoachSumAggregateInputType
    _min?: CoachMinAggregateInputType
    _max?: CoachMaxAggregateInputType
  }

  export type CoachGroupByOutputType = {
    id: number
    name: string
    nationality: string
    teamId: number | null
    _count: CoachCountAggregateOutputType | null
    _avg: CoachAvgAggregateOutputType | null
    _sum: CoachSumAggregateOutputType | null
    _min: CoachMinAggregateOutputType | null
    _max: CoachMaxAggregateOutputType | null
  }

  type GetCoachGroupByPayload<T extends CoachGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoachGroupByOutputType[P]>
            : GetScalarType<T[P], CoachGroupByOutputType[P]>
        }
      >
    >


  export type CoachSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nationality?: boolean
    teamId?: boolean
    team?: boolean | Coach$teamArgs<ExtArgs>
  }, ExtArgs["result"]["coach"]>

  export type CoachSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nationality?: boolean
    teamId?: boolean
  }, ExtArgs["result"]["coach"]>

  export type CoachSelectScalar = {
    id?: boolean
    name?: boolean
    nationality?: boolean
    teamId?: boolean
  }

  export type CoachInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | Coach$teamArgs<ExtArgs>
  }
  export type CoachIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoachPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coach"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      nationality: string
      teamId: number | null
    }, ExtArgs["result"]["coach"]>
    composites: {}
  }

  type CoachGetPayload<S extends boolean | null | undefined | CoachDefaultArgs> = $Result.GetResult<Prisma.$CoachPayload, S>

  type CoachCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoachFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoachCountAggregateInputType | true
    }

  export interface CoachDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coach'], meta: { name: 'Coach' } }
    /**
     * Find zero or one Coach that matches the filter.
     * @param {CoachFindUniqueArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoachFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoachFindUniqueArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coach that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoachFindUniqueOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoachFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoachFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coach that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindFirstOrThrowArgs} args - Arguments to find a Coach
     * @example
     * // Get one Coach
     * const coach = await prisma.coach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoachFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coaches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coaches
     * const coaches = await prisma.coach.findMany()
     * 
     * // Get first 10 Coaches
     * const coaches = await prisma.coach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coachWithIdOnly = await prisma.coach.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoachFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coach.
     * @param {CoachCreateArgs} args - Arguments to create a Coach.
     * @example
     * // Create one Coach
     * const Coach = await prisma.coach.create({
     *   data: {
     *     // ... data to create a Coach
     *   }
     * })
     * 
    **/
    create<T extends CoachCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachCreateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Coaches.
     * @param {CoachCreateManyArgs} args - Arguments to create many Coaches.
     * @example
     * // Create many Coaches
     * const coach = await prisma.coach.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CoachCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coaches and returns the data saved in the database.
     * @param {CoachCreateManyAndReturnArgs} args - Arguments to create many Coaches.
     * @example
     * // Create many Coaches
     * const coach = await prisma.coach.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coaches and only return the `id`
     * const coachWithIdOnly = await prisma.coach.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CoachCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Coach.
     * @param {CoachDeleteArgs} args - Arguments to delete one Coach.
     * @example
     * // Delete one Coach
     * const Coach = await prisma.coach.delete({
     *   where: {
     *     // ... filter to delete one Coach
     *   }
     * })
     * 
    **/
    delete<T extends CoachDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoachDeleteArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coach.
     * @param {CoachUpdateArgs} args - Arguments to update one Coach.
     * @example
     * // Update one Coach
     * const coach = await prisma.coach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoachUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coaches.
     * @param {CoachDeleteManyArgs} args - Arguments to filter Coaches to delete.
     * @example
     * // Delete a few Coaches
     * const { count } = await prisma.coach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoachDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoachDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coaches
     * const coach = await prisma.coach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoachUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coach.
     * @param {CoachUpsertArgs} args - Arguments to update or create a Coach.
     * @example
     * // Update or create a Coach
     * const coach = await prisma.coach.upsert({
     *   create: {
     *     // ... data to create a Coach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coach we want to update
     *   }
     * })
    **/
    upsert<T extends CoachUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoachUpsertArgs<ExtArgs>>
    ): Prisma__CoachClient<$Result.GetResult<Prisma.$CoachPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coaches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachCountArgs} args - Arguments to filter Coaches to count.
     * @example
     * // Count the number of Coaches
     * const count = await prisma.coach.count({
     *   where: {
     *     // ... the filter for the Coaches we want to count
     *   }
     * })
    **/
    count<T extends CoachCountArgs>(
      args?: Subset<T, CoachCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoachAggregateArgs>(args: Subset<T, CoachAggregateArgs>): Prisma.PrismaPromise<GetCoachAggregateType<T>>

    /**
     * Group by Coach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoachGroupByArgs['orderBy'] }
        : { orderBy?: CoachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoachGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coach model
   */
  readonly fields: CoachFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoachClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    team<T extends Coach$teamArgs<ExtArgs> = {}>(args?: Subset<T, Coach$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coach model
   */ 
  interface CoachFieldRefs {
    readonly id: FieldRef<"Coach", 'Int'>
    readonly name: FieldRef<"Coach", 'String'>
    readonly nationality: FieldRef<"Coach", 'String'>
    readonly teamId: FieldRef<"Coach", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Coach findUnique
   */
  export type CoachFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach findUniqueOrThrow
   */
  export type CoachFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach findFirst
   */
  export type CoachFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach findFirstOrThrow
   */
  export type CoachFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coach to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coaches.
     */
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach findMany
   */
  export type CoachFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter, which Coaches to fetch.
     */
    where?: CoachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coaches to fetch.
     */
    orderBy?: CoachOrderByWithRelationInput | CoachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coaches.
     */
    cursor?: CoachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coaches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coaches.
     */
    skip?: number
    distinct?: CoachScalarFieldEnum | CoachScalarFieldEnum[]
  }

  /**
   * Coach create
   */
  export type CoachCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to create a Coach.
     */
    data: XOR<CoachCreateInput, CoachUncheckedCreateInput>
  }

  /**
   * Coach createMany
   */
  export type CoachCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coaches.
     */
    data: CoachCreateManyInput | CoachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coach createManyAndReturn
   */
  export type CoachCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Coaches.
     */
    data: CoachCreateManyInput | CoachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coach update
   */
  export type CoachUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The data needed to update a Coach.
     */
    data: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
    /**
     * Choose, which Coach to update.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach updateMany
   */
  export type CoachUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coaches.
     */
    data: XOR<CoachUpdateManyMutationInput, CoachUncheckedUpdateManyInput>
    /**
     * Filter which Coaches to update
     */
    where?: CoachWhereInput
  }

  /**
   * Coach upsert
   */
  export type CoachUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * The filter to search for the Coach to update in case it exists.
     */
    where: CoachWhereUniqueInput
    /**
     * In case the Coach found by the `where` argument doesn't exist, create a new Coach with this data.
     */
    create: XOR<CoachCreateInput, CoachUncheckedCreateInput>
    /**
     * In case the Coach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoachUpdateInput, CoachUncheckedUpdateInput>
  }

  /**
   * Coach delete
   */
  export type CoachDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
    /**
     * Filter which Coach to delete.
     */
    where: CoachWhereUniqueInput
  }

  /**
   * Coach deleteMany
   */
  export type CoachDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coaches to delete
     */
    where?: CoachWhereInput
  }

  /**
   * Coach.team
   */
  export type Coach$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * Coach without action
   */
  export type CoachDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coach
     */
    select?: CoachSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoachInclude<ExtArgs> | null
  }


  /**
   * Model Stadium
   */

  export type AggregateStadium = {
    _count: StadiumCountAggregateOutputType | null
    _avg: StadiumAvgAggregateOutputType | null
    _sum: StadiumSumAggregateOutputType | null
    _min: StadiumMinAggregateOutputType | null
    _max: StadiumMaxAggregateOutputType | null
  }

  export type StadiumAvgAggregateOutputType = {
    id: number | null
  }

  export type StadiumSumAggregateOutputType = {
    id: number | null
  }

  export type StadiumMinAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
  }

  export type StadiumMaxAggregateOutputType = {
    id: number | null
    name: string | null
    city: string | null
  }

  export type StadiumCountAggregateOutputType = {
    id: number
    name: number
    city: number
    _all: number
  }


  export type StadiumAvgAggregateInputType = {
    id?: true
  }

  export type StadiumSumAggregateInputType = {
    id?: true
  }

  export type StadiumMinAggregateInputType = {
    id?: true
    name?: true
    city?: true
  }

  export type StadiumMaxAggregateInputType = {
    id?: true
    name?: true
    city?: true
  }

  export type StadiumCountAggregateInputType = {
    id?: true
    name?: true
    city?: true
    _all?: true
  }

  export type StadiumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stadium to aggregate.
     */
    where?: StadiumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stadiums to fetch.
     */
    orderBy?: StadiumOrderByWithRelationInput | StadiumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StadiumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stadiums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stadiums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stadiums
    **/
    _count?: true | StadiumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StadiumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StadiumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StadiumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StadiumMaxAggregateInputType
  }

  export type GetStadiumAggregateType<T extends StadiumAggregateArgs> = {
        [P in keyof T & keyof AggregateStadium]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStadium[P]>
      : GetScalarType<T[P], AggregateStadium[P]>
  }




  export type StadiumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StadiumWhereInput
    orderBy?: StadiumOrderByWithAggregationInput | StadiumOrderByWithAggregationInput[]
    by: StadiumScalarFieldEnum[] | StadiumScalarFieldEnum
    having?: StadiumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StadiumCountAggregateInputType | true
    _avg?: StadiumAvgAggregateInputType
    _sum?: StadiumSumAggregateInputType
    _min?: StadiumMinAggregateInputType
    _max?: StadiumMaxAggregateInputType
  }

  export type StadiumGroupByOutputType = {
    id: number
    name: string
    city: string
    _count: StadiumCountAggregateOutputType | null
    _avg: StadiumAvgAggregateOutputType | null
    _sum: StadiumSumAggregateOutputType | null
    _min: StadiumMinAggregateOutputType | null
    _max: StadiumMaxAggregateOutputType | null
  }

  type GetStadiumGroupByPayload<T extends StadiumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StadiumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StadiumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StadiumGroupByOutputType[P]>
            : GetScalarType<T[P], StadiumGroupByOutputType[P]>
        }
      >
    >


  export type StadiumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    city?: boolean
    teams?: boolean | Stadium$teamsArgs<ExtArgs>
    fixtures?: boolean | Stadium$fixturesArgs<ExtArgs>
    _count?: boolean | StadiumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stadium"]>

  export type StadiumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    city?: boolean
  }, ExtArgs["result"]["stadium"]>

  export type StadiumSelectScalar = {
    id?: boolean
    name?: boolean
    city?: boolean
  }

  export type StadiumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | Stadium$teamsArgs<ExtArgs>
    fixtures?: boolean | Stadium$fixturesArgs<ExtArgs>
    _count?: boolean | StadiumCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StadiumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StadiumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stadium"
    objects: {
      teams: Prisma.$TeamPayload<ExtArgs>[]
      fixtures: Prisma.$FixturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      city: string
    }, ExtArgs["result"]["stadium"]>
    composites: {}
  }

  type StadiumGetPayload<S extends boolean | null | undefined | StadiumDefaultArgs> = $Result.GetResult<Prisma.$StadiumPayload, S>

  type StadiumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StadiumFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StadiumCountAggregateInputType | true
    }

  export interface StadiumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stadium'], meta: { name: 'Stadium' } }
    /**
     * Find zero or one Stadium that matches the filter.
     * @param {StadiumFindUniqueArgs} args - Arguments to find a Stadium
     * @example
     * // Get one Stadium
     * const stadium = await prisma.stadium.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StadiumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumFindUniqueArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Stadium that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StadiumFindUniqueOrThrowArgs} args - Arguments to find a Stadium
     * @example
     * // Get one Stadium
     * const stadium = await prisma.stadium.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StadiumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Stadium that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumFindFirstArgs} args - Arguments to find a Stadium
     * @example
     * // Get one Stadium
     * const stadium = await prisma.stadium.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StadiumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumFindFirstArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Stadium that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumFindFirstOrThrowArgs} args - Arguments to find a Stadium
     * @example
     * // Get one Stadium
     * const stadium = await prisma.stadium.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StadiumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stadiums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stadiums
     * const stadiums = await prisma.stadium.findMany()
     * 
     * // Get first 10 Stadiums
     * const stadiums = await prisma.stadium.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stadiumWithIdOnly = await prisma.stadium.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StadiumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Stadium.
     * @param {StadiumCreateArgs} args - Arguments to create a Stadium.
     * @example
     * // Create one Stadium
     * const Stadium = await prisma.stadium.create({
     *   data: {
     *     // ... data to create a Stadium
     *   }
     * })
     * 
    **/
    create<T extends StadiumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumCreateArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stadiums.
     * @param {StadiumCreateManyArgs} args - Arguments to create many Stadiums.
     * @example
     * // Create many Stadiums
     * const stadium = await prisma.stadium.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StadiumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stadiums and returns the data saved in the database.
     * @param {StadiumCreateManyAndReturnArgs} args - Arguments to create many Stadiums.
     * @example
     * // Create many Stadiums
     * const stadium = await prisma.stadium.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stadiums and only return the `id`
     * const stadiumWithIdOnly = await prisma.stadium.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StadiumCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Stadium.
     * @param {StadiumDeleteArgs} args - Arguments to delete one Stadium.
     * @example
     * // Delete one Stadium
     * const Stadium = await prisma.stadium.delete({
     *   where: {
     *     // ... filter to delete one Stadium
     *   }
     * })
     * 
    **/
    delete<T extends StadiumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumDeleteArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Stadium.
     * @param {StadiumUpdateArgs} args - Arguments to update one Stadium.
     * @example
     * // Update one Stadium
     * const stadium = await prisma.stadium.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StadiumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumUpdateArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stadiums.
     * @param {StadiumDeleteManyArgs} args - Arguments to filter Stadiums to delete.
     * @example
     * // Delete a few Stadiums
     * const { count } = await prisma.stadium.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StadiumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StadiumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stadiums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stadiums
     * const stadium = await prisma.stadium.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StadiumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stadium.
     * @param {StadiumUpsertArgs} args - Arguments to update or create a Stadium.
     * @example
     * // Update or create a Stadium
     * const stadium = await prisma.stadium.upsert({
     *   create: {
     *     // ... data to create a Stadium
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stadium we want to update
     *   }
     * })
    **/
    upsert<T extends StadiumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StadiumUpsertArgs<ExtArgs>>
    ): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stadiums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumCountArgs} args - Arguments to filter Stadiums to count.
     * @example
     * // Count the number of Stadiums
     * const count = await prisma.stadium.count({
     *   where: {
     *     // ... the filter for the Stadiums we want to count
     *   }
     * })
    **/
    count<T extends StadiumCountArgs>(
      args?: Subset<T, StadiumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StadiumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stadium.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StadiumAggregateArgs>(args: Subset<T, StadiumAggregateArgs>): Prisma.PrismaPromise<GetStadiumAggregateType<T>>

    /**
     * Group by Stadium.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StadiumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StadiumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StadiumGroupByArgs['orderBy'] }
        : { orderBy?: StadiumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StadiumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStadiumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stadium model
   */
  readonly fields: StadiumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stadium.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StadiumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    teams<T extends Stadium$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Stadium$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findMany'> | Null>;

    fixtures<T extends Stadium$fixturesArgs<ExtArgs> = {}>(args?: Subset<T, Stadium$fixturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Stadium model
   */ 
  interface StadiumFieldRefs {
    readonly id: FieldRef<"Stadium", 'Int'>
    readonly name: FieldRef<"Stadium", 'String'>
    readonly city: FieldRef<"Stadium", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stadium findUnique
   */
  export type StadiumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter, which Stadium to fetch.
     */
    where: StadiumWhereUniqueInput
  }

  /**
   * Stadium findUniqueOrThrow
   */
  export type StadiumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter, which Stadium to fetch.
     */
    where: StadiumWhereUniqueInput
  }

  /**
   * Stadium findFirst
   */
  export type StadiumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter, which Stadium to fetch.
     */
    where?: StadiumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stadiums to fetch.
     */
    orderBy?: StadiumOrderByWithRelationInput | StadiumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stadiums.
     */
    cursor?: StadiumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stadiums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stadiums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stadiums.
     */
    distinct?: StadiumScalarFieldEnum | StadiumScalarFieldEnum[]
  }

  /**
   * Stadium findFirstOrThrow
   */
  export type StadiumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter, which Stadium to fetch.
     */
    where?: StadiumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stadiums to fetch.
     */
    orderBy?: StadiumOrderByWithRelationInput | StadiumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stadiums.
     */
    cursor?: StadiumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stadiums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stadiums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stadiums.
     */
    distinct?: StadiumScalarFieldEnum | StadiumScalarFieldEnum[]
  }

  /**
   * Stadium findMany
   */
  export type StadiumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter, which Stadiums to fetch.
     */
    where?: StadiumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stadiums to fetch.
     */
    orderBy?: StadiumOrderByWithRelationInput | StadiumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stadiums.
     */
    cursor?: StadiumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stadiums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stadiums.
     */
    skip?: number
    distinct?: StadiumScalarFieldEnum | StadiumScalarFieldEnum[]
  }

  /**
   * Stadium create
   */
  export type StadiumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * The data needed to create a Stadium.
     */
    data: XOR<StadiumCreateInput, StadiumUncheckedCreateInput>
  }

  /**
   * Stadium createMany
   */
  export type StadiumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stadiums.
     */
    data: StadiumCreateManyInput | StadiumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stadium createManyAndReturn
   */
  export type StadiumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stadiums.
     */
    data: StadiumCreateManyInput | StadiumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stadium update
   */
  export type StadiumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * The data needed to update a Stadium.
     */
    data: XOR<StadiumUpdateInput, StadiumUncheckedUpdateInput>
    /**
     * Choose, which Stadium to update.
     */
    where: StadiumWhereUniqueInput
  }

  /**
   * Stadium updateMany
   */
  export type StadiumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stadiums.
     */
    data: XOR<StadiumUpdateManyMutationInput, StadiumUncheckedUpdateManyInput>
    /**
     * Filter which Stadiums to update
     */
    where?: StadiumWhereInput
  }

  /**
   * Stadium upsert
   */
  export type StadiumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * The filter to search for the Stadium to update in case it exists.
     */
    where: StadiumWhereUniqueInput
    /**
     * In case the Stadium found by the `where` argument doesn't exist, create a new Stadium with this data.
     */
    create: XOR<StadiumCreateInput, StadiumUncheckedCreateInput>
    /**
     * In case the Stadium was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StadiumUpdateInput, StadiumUncheckedUpdateInput>
  }

  /**
   * Stadium delete
   */
  export type StadiumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
    /**
     * Filter which Stadium to delete.
     */
    where: StadiumWhereUniqueInput
  }

  /**
   * Stadium deleteMany
   */
  export type StadiumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stadiums to delete
     */
    where?: StadiumWhereInput
  }

  /**
   * Stadium.teams
   */
  export type Stadium$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Stadium.fixtures
   */
  export type Stadium$fixturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    cursor?: FixtureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Stadium without action
   */
  export type StadiumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stadium
     */
    select?: StadiumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StadiumInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    age: number | null
    teamId: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    age: number | null
    teamId: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    nationality: string | null
    position: string | null
    teamId: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    nationality: string | null
    position: string | null
    teamId: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    name: number
    age: number
    nationality: number
    position: number
    teamId: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    age?: true
    teamId?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    age?: true
    teamId?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    name?: true
    age?: true
    nationality?: true
    position?: true
    teamId?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    name?: true
    age?: true
    nationality?: true
    position?: true
    teamId?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    name?: true
    age?: true
    nationality?: true
    position?: true
    teamId?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    name: string
    age: number
    nationality: string
    position: string
    teamId: number
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    nationality?: boolean
    position?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    statistics?: boolean | Player$statisticsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    nationality?: boolean
    position?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    name?: boolean
    age?: boolean
    nationality?: boolean
    position?: boolean
    teamId?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    statistics?: boolean | Player$statisticsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      statistics: Prisma.$StatisticPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      age: number
      nationality: string
      position: string
      teamId: number
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    statistics<T extends Player$statisticsArgs<ExtArgs> = {}>(args?: Subset<T, Player$statisticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly name: FieldRef<"Player", 'String'>
    readonly age: FieldRef<"Player", 'Int'>
    readonly nationality: FieldRef<"Player", 'String'>
    readonly position: FieldRef<"Player", 'String'>
    readonly teamId: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player.statistics
   */
  export type Player$statisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    where?: StatisticWhereInput
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    cursor?: StatisticWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model Statistic
   */

  export type AggregateStatistic = {
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  export type StatisticAvgAggregateOutputType = {
    id: number | null
    goals: number | null
    assists: number | null
    games: number | null
    minutes: number | null
    playerId: number | null
    seasonId: number | null
  }

  export type StatisticSumAggregateOutputType = {
    id: number | null
    goals: number | null
    assists: number | null
    games: number | null
    minutes: number | null
    playerId: number | null
    seasonId: number | null
  }

  export type StatisticMinAggregateOutputType = {
    id: number | null
    goals: number | null
    assists: number | null
    games: number | null
    minutes: number | null
    playerId: number | null
    seasonId: number | null
  }

  export type StatisticMaxAggregateOutputType = {
    id: number | null
    goals: number | null
    assists: number | null
    games: number | null
    minutes: number | null
    playerId: number | null
    seasonId: number | null
  }

  export type StatisticCountAggregateOutputType = {
    id: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
    seasonId: number
    _all: number
  }


  export type StatisticAvgAggregateInputType = {
    id?: true
    goals?: true
    assists?: true
    games?: true
    minutes?: true
    playerId?: true
    seasonId?: true
  }

  export type StatisticSumAggregateInputType = {
    id?: true
    goals?: true
    assists?: true
    games?: true
    minutes?: true
    playerId?: true
    seasonId?: true
  }

  export type StatisticMinAggregateInputType = {
    id?: true
    goals?: true
    assists?: true
    games?: true
    minutes?: true
    playerId?: true
    seasonId?: true
  }

  export type StatisticMaxAggregateInputType = {
    id?: true
    goals?: true
    assists?: true
    games?: true
    minutes?: true
    playerId?: true
    seasonId?: true
  }

  export type StatisticCountAggregateInputType = {
    id?: true
    goals?: true
    assists?: true
    games?: true
    minutes?: true
    playerId?: true
    seasonId?: true
    _all?: true
  }

  export type StatisticAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistic to aggregate.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statistics
    **/
    _count?: true | StatisticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatisticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatisticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatisticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatisticMaxAggregateInputType
  }

  export type GetStatisticAggregateType<T extends StatisticAggregateArgs> = {
        [P in keyof T & keyof AggregateStatistic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatistic[P]>
      : GetScalarType<T[P], AggregateStatistic[P]>
  }




  export type StatisticGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatisticWhereInput
    orderBy?: StatisticOrderByWithAggregationInput | StatisticOrderByWithAggregationInput[]
    by: StatisticScalarFieldEnum[] | StatisticScalarFieldEnum
    having?: StatisticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatisticCountAggregateInputType | true
    _avg?: StatisticAvgAggregateInputType
    _sum?: StatisticSumAggregateInputType
    _min?: StatisticMinAggregateInputType
    _max?: StatisticMaxAggregateInputType
  }

  export type StatisticGroupByOutputType = {
    id: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
    seasonId: number
    _count: StatisticCountAggregateOutputType | null
    _avg: StatisticAvgAggregateOutputType | null
    _sum: StatisticSumAggregateOutputType | null
    _min: StatisticMinAggregateOutputType | null
    _max: StatisticMaxAggregateOutputType | null
  }

  type GetStatisticGroupByPayload<T extends StatisticGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatisticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatisticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatisticGroupByOutputType[P]>
            : GetScalarType<T[P], StatisticGroupByOutputType[P]>
        }
      >
    >


  export type StatisticSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goals?: boolean
    assists?: boolean
    games?: boolean
    minutes?: boolean
    playerId?: boolean
    seasonId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statistic"]>

  export type StatisticSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goals?: boolean
    assists?: boolean
    games?: boolean
    minutes?: boolean
    playerId?: boolean
    seasonId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statistic"]>

  export type StatisticSelectScalar = {
    id?: boolean
    goals?: boolean
    assists?: boolean
    games?: boolean
    minutes?: boolean
    playerId?: boolean
    seasonId?: boolean
  }

  export type StatisticInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
  }
  export type StatisticIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
  }

  export type $StatisticPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Statistic"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      season: Prisma.$SeasonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      goals: number
      assists: number
      games: number
      minutes: number
      playerId: number
      seasonId: number
    }, ExtArgs["result"]["statistic"]>
    composites: {}
  }

  type StatisticGetPayload<S extends boolean | null | undefined | StatisticDefaultArgs> = $Result.GetResult<Prisma.$StatisticPayload, S>

  type StatisticCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatisticFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatisticCountAggregateInputType | true
    }

  export interface StatisticDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Statistic'], meta: { name: 'Statistic' } }
    /**
     * Find zero or one Statistic that matches the filter.
     * @param {StatisticFindUniqueArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatisticFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticFindUniqueArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Statistic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StatisticFindUniqueOrThrowArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatisticFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Statistic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindFirstArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatisticFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticFindFirstArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Statistic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindFirstOrThrowArgs} args - Arguments to find a Statistic
     * @example
     * // Get one Statistic
     * const statistic = await prisma.statistic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatisticFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statistics
     * const statistics = await prisma.statistic.findMany()
     * 
     * // Get first 10 Statistics
     * const statistics = await prisma.statistic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statisticWithIdOnly = await prisma.statistic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatisticFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Statistic.
     * @param {StatisticCreateArgs} args - Arguments to create a Statistic.
     * @example
     * // Create one Statistic
     * const Statistic = await prisma.statistic.create({
     *   data: {
     *     // ... data to create a Statistic
     *   }
     * })
     * 
    **/
    create<T extends StatisticCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticCreateArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statistics.
     * @param {StatisticCreateManyArgs} args - Arguments to create many Statistics.
     * @example
     * // Create many Statistics
     * const statistic = await prisma.statistic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StatisticCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Statistics and returns the data saved in the database.
     * @param {StatisticCreateManyAndReturnArgs} args - Arguments to create many Statistics.
     * @example
     * // Create many Statistics
     * const statistic = await prisma.statistic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Statistics and only return the `id`
     * const statisticWithIdOnly = await prisma.statistic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StatisticCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Statistic.
     * @param {StatisticDeleteArgs} args - Arguments to delete one Statistic.
     * @example
     * // Delete one Statistic
     * const Statistic = await prisma.statistic.delete({
     *   where: {
     *     // ... filter to delete one Statistic
     *   }
     * })
     * 
    **/
    delete<T extends StatisticDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticDeleteArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Statistic.
     * @param {StatisticUpdateArgs} args - Arguments to update one Statistic.
     * @example
     * // Update one Statistic
     * const statistic = await prisma.statistic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatisticUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticUpdateArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statistics.
     * @param {StatisticDeleteManyArgs} args - Arguments to filter Statistics to delete.
     * @example
     * // Delete a few Statistics
     * const { count } = await prisma.statistic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatisticDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statistics
     * const statistic = await prisma.statistic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatisticUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statistic.
     * @param {StatisticUpsertArgs} args - Arguments to update or create a Statistic.
     * @example
     * // Update or create a Statistic
     * const statistic = await prisma.statistic.upsert({
     *   create: {
     *     // ... data to create a Statistic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statistic we want to update
     *   }
     * })
    **/
    upsert<T extends StatisticUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticUpsertArgs<ExtArgs>>
    ): Prisma__StatisticClient<$Result.GetResult<Prisma.$StatisticPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticCountArgs} args - Arguments to filter Statistics to count.
     * @example
     * // Count the number of Statistics
     * const count = await prisma.statistic.count({
     *   where: {
     *     // ... the filter for the Statistics we want to count
     *   }
     * })
    **/
    count<T extends StatisticCountArgs>(
      args?: Subset<T, StatisticCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatisticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatisticAggregateArgs>(args: Subset<T, StatisticAggregateArgs>): Prisma.PrismaPromise<GetStatisticAggregateType<T>>

    /**
     * Group by Statistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatisticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatisticGroupByArgs['orderBy'] }
        : { orderBy?: StatisticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatisticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatisticGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Statistic model
   */
  readonly fields: StatisticFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Statistic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatisticClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    season<T extends SeasonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonDefaultArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Statistic model
   */ 
  interface StatisticFieldRefs {
    readonly id: FieldRef<"Statistic", 'Int'>
    readonly goals: FieldRef<"Statistic", 'Int'>
    readonly assists: FieldRef<"Statistic", 'Int'>
    readonly games: FieldRef<"Statistic", 'Int'>
    readonly minutes: FieldRef<"Statistic", 'Int'>
    readonly playerId: FieldRef<"Statistic", 'Int'>
    readonly seasonId: FieldRef<"Statistic", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Statistic findUnique
   */
  export type StatisticFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic findUniqueOrThrow
   */
  export type StatisticFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic findFirst
   */
  export type StatisticFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic findFirstOrThrow
   */
  export type StatisticFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter, which Statistic to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic findMany
   */
  export type StatisticFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticOrderByWithRelationInput | StatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statistics.
     */
    cursor?: StatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    distinct?: StatisticScalarFieldEnum | StatisticScalarFieldEnum[]
  }

  /**
   * Statistic create
   */
  export type StatisticCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * The data needed to create a Statistic.
     */
    data: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
  }

  /**
   * Statistic createMany
   */
  export type StatisticCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statistics.
     */
    data: StatisticCreateManyInput | StatisticCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Statistic createManyAndReturn
   */
  export type StatisticCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Statistics.
     */
    data: StatisticCreateManyInput | StatisticCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Statistic update
   */
  export type StatisticUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * The data needed to update a Statistic.
     */
    data: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
    /**
     * Choose, which Statistic to update.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic updateMany
   */
  export type StatisticUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statistics.
     */
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyInput>
    /**
     * Filter which Statistics to update
     */
    where?: StatisticWhereInput
  }

  /**
   * Statistic upsert
   */
  export type StatisticUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * The filter to search for the Statistic to update in case it exists.
     */
    where: StatisticWhereUniqueInput
    /**
     * In case the Statistic found by the `where` argument doesn't exist, create a new Statistic with this data.
     */
    create: XOR<StatisticCreateInput, StatisticUncheckedCreateInput>
    /**
     * In case the Statistic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatisticUpdateInput, StatisticUncheckedUpdateInput>
  }

  /**
   * Statistic delete
   */
  export type StatisticDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
    /**
     * Filter which Statistic to delete.
     */
    where: StatisticWhereUniqueInput
  }

  /**
   * Statistic deleteMany
   */
  export type StatisticDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistics to delete
     */
    where?: StatisticWhereInput
  }

  /**
   * Statistic without action
   */
  export type StatisticDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistic
     */
    select?: StatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatisticInclude<ExtArgs> | null
  }


  /**
   * Model Fixture
   */

  export type AggregateFixture = {
    _count: FixtureCountAggregateOutputType | null
    _avg: FixtureAvgAggregateOutputType | null
    _sum: FixtureSumAggregateOutputType | null
    _min: FixtureMinAggregateOutputType | null
    _max: FixtureMaxAggregateOutputType | null
  }

  export type FixtureAvgAggregateOutputType = {
    id: number | null
    fixtureId: number | null
    timestamp: number | null
    elapsed: number | null
    venueId: number | null
    leagueId: number | null
    seasonId: number | null
    homeTeamId: number | null
    awayTeamId: number | null
    goalsHome: number | null
    goalsAway: number | null
    halftimeHome: number | null
    halftimeAway: number | null
    fulltimeHome: number | null
    fulltimeAway: number | null
    extratimeHome: number | null
    extratimeAway: number | null
    penaltyHome: number | null
    penaltyAway: number | null
  }

  export type FixtureSumAggregateOutputType = {
    id: number | null
    fixtureId: number | null
    timestamp: number | null
    elapsed: number | null
    venueId: number | null
    leagueId: number | null
    seasonId: number | null
    homeTeamId: number | null
    awayTeamId: number | null
    goalsHome: number | null
    goalsAway: number | null
    halftimeHome: number | null
    halftimeAway: number | null
    fulltimeHome: number | null
    fulltimeAway: number | null
    extratimeHome: number | null
    extratimeAway: number | null
    penaltyHome: number | null
    penaltyAway: number | null
  }

  export type FixtureMinAggregateOutputType = {
    id: number | null
    fixtureId: number | null
    referee: string | null
    timezone: string | null
    date: Date | null
    timestamp: number | null
    status: string | null
    elapsed: number | null
    venueId: number | null
    leagueId: number | null
    seasonId: number | null
    homeTeamId: number | null
    awayTeamId: number | null
    goalsHome: number | null
    goalsAway: number | null
    halftimeHome: number | null
    halftimeAway: number | null
    fulltimeHome: number | null
    fulltimeAway: number | null
    extratimeHome: number | null
    extratimeAway: number | null
    penaltyHome: number | null
    penaltyAway: number | null
  }

  export type FixtureMaxAggregateOutputType = {
    id: number | null
    fixtureId: number | null
    referee: string | null
    timezone: string | null
    date: Date | null
    timestamp: number | null
    status: string | null
    elapsed: number | null
    venueId: number | null
    leagueId: number | null
    seasonId: number | null
    homeTeamId: number | null
    awayTeamId: number | null
    goalsHome: number | null
    goalsAway: number | null
    halftimeHome: number | null
    halftimeAway: number | null
    fulltimeHome: number | null
    fulltimeAway: number | null
    extratimeHome: number | null
    extratimeAway: number | null
    penaltyHome: number | null
    penaltyAway: number | null
  }

  export type FixtureCountAggregateOutputType = {
    id: number
    fixtureId: number
    referee: number
    timezone: number
    date: number
    timestamp: number
    status: number
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome: number
    goalsAway: number
    halftimeHome: number
    halftimeAway: number
    fulltimeHome: number
    fulltimeAway: number
    extratimeHome: number
    extratimeAway: number
    penaltyHome: number
    penaltyAway: number
    _all: number
  }


  export type FixtureAvgAggregateInputType = {
    id?: true
    fixtureId?: true
    timestamp?: true
    elapsed?: true
    venueId?: true
    leagueId?: true
    seasonId?: true
    homeTeamId?: true
    awayTeamId?: true
    goalsHome?: true
    goalsAway?: true
    halftimeHome?: true
    halftimeAway?: true
    fulltimeHome?: true
    fulltimeAway?: true
    extratimeHome?: true
    extratimeAway?: true
    penaltyHome?: true
    penaltyAway?: true
  }

  export type FixtureSumAggregateInputType = {
    id?: true
    fixtureId?: true
    timestamp?: true
    elapsed?: true
    venueId?: true
    leagueId?: true
    seasonId?: true
    homeTeamId?: true
    awayTeamId?: true
    goalsHome?: true
    goalsAway?: true
    halftimeHome?: true
    halftimeAway?: true
    fulltimeHome?: true
    fulltimeAway?: true
    extratimeHome?: true
    extratimeAway?: true
    penaltyHome?: true
    penaltyAway?: true
  }

  export type FixtureMinAggregateInputType = {
    id?: true
    fixtureId?: true
    referee?: true
    timezone?: true
    date?: true
    timestamp?: true
    status?: true
    elapsed?: true
    venueId?: true
    leagueId?: true
    seasonId?: true
    homeTeamId?: true
    awayTeamId?: true
    goalsHome?: true
    goalsAway?: true
    halftimeHome?: true
    halftimeAway?: true
    fulltimeHome?: true
    fulltimeAway?: true
    extratimeHome?: true
    extratimeAway?: true
    penaltyHome?: true
    penaltyAway?: true
  }

  export type FixtureMaxAggregateInputType = {
    id?: true
    fixtureId?: true
    referee?: true
    timezone?: true
    date?: true
    timestamp?: true
    status?: true
    elapsed?: true
    venueId?: true
    leagueId?: true
    seasonId?: true
    homeTeamId?: true
    awayTeamId?: true
    goalsHome?: true
    goalsAway?: true
    halftimeHome?: true
    halftimeAway?: true
    fulltimeHome?: true
    fulltimeAway?: true
    extratimeHome?: true
    extratimeAway?: true
    penaltyHome?: true
    penaltyAway?: true
  }

  export type FixtureCountAggregateInputType = {
    id?: true
    fixtureId?: true
    referee?: true
    timezone?: true
    date?: true
    timestamp?: true
    status?: true
    elapsed?: true
    venueId?: true
    leagueId?: true
    seasonId?: true
    homeTeamId?: true
    awayTeamId?: true
    goalsHome?: true
    goalsAway?: true
    halftimeHome?: true
    halftimeAway?: true
    fulltimeHome?: true
    fulltimeAway?: true
    extratimeHome?: true
    extratimeAway?: true
    penaltyHome?: true
    penaltyAway?: true
    _all?: true
  }

  export type FixtureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fixture to aggregate.
     */
    where?: FixtureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fixtures to fetch.
     */
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FixtureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fixtures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fixtures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fixtures
    **/
    _count?: true | FixtureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FixtureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FixtureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FixtureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FixtureMaxAggregateInputType
  }

  export type GetFixtureAggregateType<T extends FixtureAggregateArgs> = {
        [P in keyof T & keyof AggregateFixture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFixture[P]>
      : GetScalarType<T[P], AggregateFixture[P]>
  }




  export type FixtureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FixtureWhereInput
    orderBy?: FixtureOrderByWithAggregationInput | FixtureOrderByWithAggregationInput[]
    by: FixtureScalarFieldEnum[] | FixtureScalarFieldEnum
    having?: FixtureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FixtureCountAggregateInputType | true
    _avg?: FixtureAvgAggregateInputType
    _sum?: FixtureSumAggregateInputType
    _min?: FixtureMinAggregateInputType
    _max?: FixtureMaxAggregateInputType
  }

  export type FixtureGroupByOutputType = {
    id: number
    fixtureId: number
    referee: string | null
    timezone: string
    date: Date
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome: number | null
    goalsAway: number | null
    halftimeHome: number | null
    halftimeAway: number | null
    fulltimeHome: number | null
    fulltimeAway: number | null
    extratimeHome: number | null
    extratimeAway: number | null
    penaltyHome: number | null
    penaltyAway: number | null
    _count: FixtureCountAggregateOutputType | null
    _avg: FixtureAvgAggregateOutputType | null
    _sum: FixtureSumAggregateOutputType | null
    _min: FixtureMinAggregateOutputType | null
    _max: FixtureMaxAggregateOutputType | null
  }

  type GetFixtureGroupByPayload<T extends FixtureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FixtureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FixtureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FixtureGroupByOutputType[P]>
            : GetScalarType<T[P], FixtureGroupByOutputType[P]>
        }
      >
    >


  export type FixtureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fixtureId?: boolean
    referee?: boolean
    timezone?: boolean
    date?: boolean
    timestamp?: boolean
    status?: boolean
    elapsed?: boolean
    venueId?: boolean
    leagueId?: boolean
    seasonId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    goalsHome?: boolean
    goalsAway?: boolean
    halftimeHome?: boolean
    halftimeAway?: boolean
    fulltimeHome?: boolean
    fulltimeAway?: boolean
    extratimeHome?: boolean
    extratimeAway?: boolean
    penaltyHome?: boolean
    penaltyAway?: boolean
    venue?: boolean | StadiumDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fixture"]>

  export type FixtureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fixtureId?: boolean
    referee?: boolean
    timezone?: boolean
    date?: boolean
    timestamp?: boolean
    status?: boolean
    elapsed?: boolean
    venueId?: boolean
    leagueId?: boolean
    seasonId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    goalsHome?: boolean
    goalsAway?: boolean
    halftimeHome?: boolean
    halftimeAway?: boolean
    fulltimeHome?: boolean
    fulltimeAway?: boolean
    extratimeHome?: boolean
    extratimeAway?: boolean
    penaltyHome?: boolean
    penaltyAway?: boolean
    venue?: boolean | StadiumDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fixture"]>

  export type FixtureSelectScalar = {
    id?: boolean
    fixtureId?: boolean
    referee?: boolean
    timezone?: boolean
    date?: boolean
    timestamp?: boolean
    status?: boolean
    elapsed?: boolean
    venueId?: boolean
    leagueId?: boolean
    seasonId?: boolean
    homeTeamId?: boolean
    awayTeamId?: boolean
    goalsHome?: boolean
    goalsAway?: boolean
    halftimeHome?: boolean
    halftimeAway?: boolean
    fulltimeHome?: boolean
    fulltimeAway?: boolean
    extratimeHome?: boolean
    extratimeAway?: boolean
    penaltyHome?: boolean
    penaltyAway?: boolean
  }

  export type FixtureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | StadiumDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type FixtureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | StadiumDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    season?: boolean | SeasonDefaultArgs<ExtArgs>
    homeTeam?: boolean | TeamDefaultArgs<ExtArgs>
    awayTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $FixturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fixture"
    objects: {
      venue: Prisma.$StadiumPayload<ExtArgs>
      league: Prisma.$LeaguePayload<ExtArgs>
      season: Prisma.$SeasonPayload<ExtArgs>
      homeTeam: Prisma.$TeamPayload<ExtArgs>
      awayTeam: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fixtureId: number
      referee: string | null
      timezone: string
      date: Date
      timestamp: number
      status: string
      elapsed: number
      venueId: number
      leagueId: number
      seasonId: number
      homeTeamId: number
      awayTeamId: number
      goalsHome: number | null
      goalsAway: number | null
      halftimeHome: number | null
      halftimeAway: number | null
      fulltimeHome: number | null
      fulltimeAway: number | null
      extratimeHome: number | null
      extratimeAway: number | null
      penaltyHome: number | null
      penaltyAway: number | null
    }, ExtArgs["result"]["fixture"]>
    composites: {}
  }

  type FixtureGetPayload<S extends boolean | null | undefined | FixtureDefaultArgs> = $Result.GetResult<Prisma.$FixturePayload, S>

  type FixtureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FixtureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FixtureCountAggregateInputType | true
    }

  export interface FixtureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fixture'], meta: { name: 'Fixture' } }
    /**
     * Find zero or one Fixture that matches the filter.
     * @param {FixtureFindUniqueArgs} args - Arguments to find a Fixture
     * @example
     * // Get one Fixture
     * const fixture = await prisma.fixture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FixtureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureFindUniqueArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Fixture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FixtureFindUniqueOrThrowArgs} args - Arguments to find a Fixture
     * @example
     * // Get one Fixture
     * const fixture = await prisma.fixture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FixtureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Fixture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureFindFirstArgs} args - Arguments to find a Fixture
     * @example
     * // Get one Fixture
     * const fixture = await prisma.fixture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FixtureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureFindFirstArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Fixture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureFindFirstOrThrowArgs} args - Arguments to find a Fixture
     * @example
     * // Get one Fixture
     * const fixture = await prisma.fixture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FixtureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Fixtures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fixtures
     * const fixtures = await prisma.fixture.findMany()
     * 
     * // Get first 10 Fixtures
     * const fixtures = await prisma.fixture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fixtureWithIdOnly = await prisma.fixture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FixtureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Fixture.
     * @param {FixtureCreateArgs} args - Arguments to create a Fixture.
     * @example
     * // Create one Fixture
     * const Fixture = await prisma.fixture.create({
     *   data: {
     *     // ... data to create a Fixture
     *   }
     * })
     * 
    **/
    create<T extends FixtureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureCreateArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Fixtures.
     * @param {FixtureCreateManyArgs} args - Arguments to create many Fixtures.
     * @example
     * // Create many Fixtures
     * const fixture = await prisma.fixture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends FixtureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fixtures and returns the data saved in the database.
     * @param {FixtureCreateManyAndReturnArgs} args - Arguments to create many Fixtures.
     * @example
     * // Create many Fixtures
     * const fixture = await prisma.fixture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fixtures and only return the `id`
     * const fixtureWithIdOnly = await prisma.fixture.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends FixtureCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Fixture.
     * @param {FixtureDeleteArgs} args - Arguments to delete one Fixture.
     * @example
     * // Delete one Fixture
     * const Fixture = await prisma.fixture.delete({
     *   where: {
     *     // ... filter to delete one Fixture
     *   }
     * })
     * 
    **/
    delete<T extends FixtureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureDeleteArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Fixture.
     * @param {FixtureUpdateArgs} args - Arguments to update one Fixture.
     * @example
     * // Update one Fixture
     * const fixture = await prisma.fixture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FixtureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureUpdateArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Fixtures.
     * @param {FixtureDeleteManyArgs} args - Arguments to filter Fixtures to delete.
     * @example
     * // Delete a few Fixtures
     * const { count } = await prisma.fixture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FixtureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FixtureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fixtures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fixtures
     * const fixture = await prisma.fixture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FixtureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fixture.
     * @param {FixtureUpsertArgs} args - Arguments to update or create a Fixture.
     * @example
     * // Update or create a Fixture
     * const fixture = await prisma.fixture.upsert({
     *   create: {
     *     // ... data to create a Fixture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fixture we want to update
     *   }
     * })
    **/
    upsert<T extends FixtureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FixtureUpsertArgs<ExtArgs>>
    ): Prisma__FixtureClient<$Result.GetResult<Prisma.$FixturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Fixtures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureCountArgs} args - Arguments to filter Fixtures to count.
     * @example
     * // Count the number of Fixtures
     * const count = await prisma.fixture.count({
     *   where: {
     *     // ... the filter for the Fixtures we want to count
     *   }
     * })
    **/
    count<T extends FixtureCountArgs>(
      args?: Subset<T, FixtureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FixtureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fixture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FixtureAggregateArgs>(args: Subset<T, FixtureAggregateArgs>): Prisma.PrismaPromise<GetFixtureAggregateType<T>>

    /**
     * Group by Fixture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FixtureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FixtureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FixtureGroupByArgs['orderBy'] }
        : { orderBy?: FixtureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FixtureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFixtureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fixture model
   */
  readonly fields: FixtureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fixture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FixtureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    venue<T extends StadiumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StadiumDefaultArgs<ExtArgs>>): Prisma__StadiumClient<$Result.GetResult<Prisma.$StadiumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    season<T extends SeasonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeasonDefaultArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    homeTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    awayTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Fixture model
   */ 
  interface FixtureFieldRefs {
    readonly id: FieldRef<"Fixture", 'Int'>
    readonly fixtureId: FieldRef<"Fixture", 'Int'>
    readonly referee: FieldRef<"Fixture", 'String'>
    readonly timezone: FieldRef<"Fixture", 'String'>
    readonly date: FieldRef<"Fixture", 'DateTime'>
    readonly timestamp: FieldRef<"Fixture", 'Int'>
    readonly status: FieldRef<"Fixture", 'String'>
    readonly elapsed: FieldRef<"Fixture", 'Int'>
    readonly venueId: FieldRef<"Fixture", 'Int'>
    readonly leagueId: FieldRef<"Fixture", 'Int'>
    readonly seasonId: FieldRef<"Fixture", 'Int'>
    readonly homeTeamId: FieldRef<"Fixture", 'Int'>
    readonly awayTeamId: FieldRef<"Fixture", 'Int'>
    readonly goalsHome: FieldRef<"Fixture", 'Int'>
    readonly goalsAway: FieldRef<"Fixture", 'Int'>
    readonly halftimeHome: FieldRef<"Fixture", 'Int'>
    readonly halftimeAway: FieldRef<"Fixture", 'Int'>
    readonly fulltimeHome: FieldRef<"Fixture", 'Int'>
    readonly fulltimeAway: FieldRef<"Fixture", 'Int'>
    readonly extratimeHome: FieldRef<"Fixture", 'Int'>
    readonly extratimeAway: FieldRef<"Fixture", 'Int'>
    readonly penaltyHome: FieldRef<"Fixture", 'Int'>
    readonly penaltyAway: FieldRef<"Fixture", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Fixture findUnique
   */
  export type FixtureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter, which Fixture to fetch.
     */
    where: FixtureWhereUniqueInput
  }

  /**
   * Fixture findUniqueOrThrow
   */
  export type FixtureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter, which Fixture to fetch.
     */
    where: FixtureWhereUniqueInput
  }

  /**
   * Fixture findFirst
   */
  export type FixtureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter, which Fixture to fetch.
     */
    where?: FixtureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fixtures to fetch.
     */
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fixtures.
     */
    cursor?: FixtureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fixtures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fixtures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fixtures.
     */
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Fixture findFirstOrThrow
   */
  export type FixtureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter, which Fixture to fetch.
     */
    where?: FixtureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fixtures to fetch.
     */
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fixtures.
     */
    cursor?: FixtureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fixtures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fixtures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fixtures.
     */
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Fixture findMany
   */
  export type FixtureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter, which Fixtures to fetch.
     */
    where?: FixtureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fixtures to fetch.
     */
    orderBy?: FixtureOrderByWithRelationInput | FixtureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fixtures.
     */
    cursor?: FixtureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fixtures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fixtures.
     */
    skip?: number
    distinct?: FixtureScalarFieldEnum | FixtureScalarFieldEnum[]
  }

  /**
   * Fixture create
   */
  export type FixtureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * The data needed to create a Fixture.
     */
    data: XOR<FixtureCreateInput, FixtureUncheckedCreateInput>
  }

  /**
   * Fixture createMany
   */
  export type FixtureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fixtures.
     */
    data: FixtureCreateManyInput | FixtureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fixture createManyAndReturn
   */
  export type FixtureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fixtures.
     */
    data: FixtureCreateManyInput | FixtureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Fixture update
   */
  export type FixtureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * The data needed to update a Fixture.
     */
    data: XOR<FixtureUpdateInput, FixtureUncheckedUpdateInput>
    /**
     * Choose, which Fixture to update.
     */
    where: FixtureWhereUniqueInput
  }

  /**
   * Fixture updateMany
   */
  export type FixtureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fixtures.
     */
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyInput>
    /**
     * Filter which Fixtures to update
     */
    where?: FixtureWhereInput
  }

  /**
   * Fixture upsert
   */
  export type FixtureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * The filter to search for the Fixture to update in case it exists.
     */
    where: FixtureWhereUniqueInput
    /**
     * In case the Fixture found by the `where` argument doesn't exist, create a new Fixture with this data.
     */
    create: XOR<FixtureCreateInput, FixtureUncheckedCreateInput>
    /**
     * In case the Fixture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FixtureUpdateInput, FixtureUncheckedUpdateInput>
  }

  /**
   * Fixture delete
   */
  export type FixtureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
    /**
     * Filter which Fixture to delete.
     */
    where: FixtureWhereUniqueInput
  }

  /**
   * Fixture deleteMany
   */
  export type FixtureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fixtures to delete
     */
    where?: FixtureWhereInput
  }

  /**
   * Fixture without action
   */
  export type FixtureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fixture
     */
    select?: FixtureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FixtureInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    flag: 'flag'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const LeagueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    logo: 'logo',
    countryId: 'countryId'
  };

  export type LeagueScalarFieldEnum = (typeof LeagueScalarFieldEnum)[keyof typeof LeagueScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    id: 'id',
    year: 'year',
    start: 'start',
    end: 'end',
    current: 'current',
    leagueId: 'leagueId'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    countryId: 'countryId',
    stadiumId: 'stadiumId',
    coachId: 'coachId'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const CoachScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nationality: 'nationality',
    teamId: 'teamId'
  };

  export type CoachScalarFieldEnum = (typeof CoachScalarFieldEnum)[keyof typeof CoachScalarFieldEnum]


  export const StadiumScalarFieldEnum: {
    id: 'id',
    name: 'name',
    city: 'city'
  };

  export type StadiumScalarFieldEnum = (typeof StadiumScalarFieldEnum)[keyof typeof StadiumScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    age: 'age',
    nationality: 'nationality',
    position: 'position',
    teamId: 'teamId'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const StatisticScalarFieldEnum: {
    id: 'id',
    goals: 'goals',
    assists: 'assists',
    games: 'games',
    minutes: 'minutes',
    playerId: 'playerId',
    seasonId: 'seasonId'
  };

  export type StatisticScalarFieldEnum = (typeof StatisticScalarFieldEnum)[keyof typeof StatisticScalarFieldEnum]


  export const FixtureScalarFieldEnum: {
    id: 'id',
    fixtureId: 'fixtureId',
    referee: 'referee',
    timezone: 'timezone',
    date: 'date',
    timestamp: 'timestamp',
    status: 'status',
    elapsed: 'elapsed',
    venueId: 'venueId',
    leagueId: 'leagueId',
    seasonId: 'seasonId',
    homeTeamId: 'homeTeamId',
    awayTeamId: 'awayTeamId',
    goalsHome: 'goalsHome',
    goalsAway: 'goalsAway',
    halftimeHome: 'halftimeHome',
    halftimeAway: 'halftimeAway',
    fulltimeHome: 'fulltimeHome',
    fulltimeAway: 'fulltimeAway',
    extratimeHome: 'extratimeHome',
    extratimeAway: 'extratimeAway',
    penaltyHome: 'penaltyHome',
    penaltyAway: 'penaltyAway'
  };

  export type FixtureScalarFieldEnum = (typeof FixtureScalarFieldEnum)[keyof typeof FixtureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    name?: StringFilter<"Country"> | string
    code?: StringNullableFilter<"Country"> | string | null
    flag?: StringNullableFilter<"Country"> | string | null
    leagues?: LeagueListRelationFilter
    teams?: TeamListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    flag?: SortOrderInput | SortOrder
    leagues?: LeagueOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    code?: StringNullableFilter<"Country"> | string | null
    flag?: StringNullableFilter<"Country"> | string | null
    leagues?: LeagueListRelationFilter
    teams?: TeamListRelationFilter
  }, "id" | "name">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    flag?: SortOrderInput | SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    name?: StringWithAggregatesFilter<"Country"> | string
    code?: StringNullableWithAggregatesFilter<"Country"> | string | null
    flag?: StringNullableWithAggregatesFilter<"Country"> | string | null
  }

  export type LeagueWhereInput = {
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    id?: IntFilter<"League"> | number
    name?: StringFilter<"League"> | string
    type?: StringFilter<"League"> | string
    logo?: StringNullableFilter<"League"> | string | null
    countryId?: IntFilter<"League"> | number
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    seasons?: SeasonListRelationFilter
    fixtures?: FixtureListRelationFilter
  }

  export type LeagueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    logo?: SortOrderInput | SortOrder
    countryId?: SortOrder
    country?: CountryOrderByWithRelationInput
    seasons?: SeasonOrderByRelationAggregateInput
    fixtures?: FixtureOrderByRelationAggregateInput
  }

  export type LeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    name?: StringFilter<"League"> | string
    type?: StringFilter<"League"> | string
    logo?: StringNullableFilter<"League"> | string | null
    countryId?: IntFilter<"League"> | number
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    seasons?: SeasonListRelationFilter
    fixtures?: FixtureListRelationFilter
  }, "id">

  export type LeagueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    logo?: SortOrderInput | SortOrder
    countryId?: SortOrder
    _count?: LeagueCountOrderByAggregateInput
    _avg?: LeagueAvgOrderByAggregateInput
    _max?: LeagueMaxOrderByAggregateInput
    _min?: LeagueMinOrderByAggregateInput
    _sum?: LeagueSumOrderByAggregateInput
  }

  export type LeagueScalarWhereWithAggregatesInput = {
    AND?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    OR?: LeagueScalarWhereWithAggregatesInput[]
    NOT?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"League"> | number
    name?: StringWithAggregatesFilter<"League"> | string
    type?: StringWithAggregatesFilter<"League"> | string
    logo?: StringNullableWithAggregatesFilter<"League"> | string | null
    countryId?: IntWithAggregatesFilter<"League"> | number
  }

  export type SeasonWhereInput = {
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    id?: IntFilter<"Season"> | number
    year?: IntFilter<"Season"> | number
    start?: DateTimeFilter<"Season"> | Date | string
    end?: DateTimeFilter<"Season"> | Date | string
    current?: BoolFilter<"Season"> | boolean
    leagueId?: IntFilter<"Season"> | number
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    statistics?: StatisticListRelationFilter
    fixtures?: FixtureListRelationFilter
  }

  export type SeasonOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    start?: SortOrder
    end?: SortOrder
    current?: SortOrder
    leagueId?: SortOrder
    league?: LeagueOrderByWithRelationInput
    statistics?: StatisticOrderByRelationAggregateInput
    fixtures?: FixtureOrderByRelationAggregateInput
  }

  export type SeasonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    year?: IntFilter<"Season"> | number
    start?: DateTimeFilter<"Season"> | Date | string
    end?: DateTimeFilter<"Season"> | Date | string
    current?: BoolFilter<"Season"> | boolean
    leagueId?: IntFilter<"Season"> | number
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    statistics?: StatisticListRelationFilter
    fixtures?: FixtureListRelationFilter
  }, "id">

  export type SeasonOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    start?: SortOrder
    end?: SortOrder
    current?: SortOrder
    leagueId?: SortOrder
    _count?: SeasonCountOrderByAggregateInput
    _avg?: SeasonAvgOrderByAggregateInput
    _max?: SeasonMaxOrderByAggregateInput
    _min?: SeasonMinOrderByAggregateInput
    _sum?: SeasonSumOrderByAggregateInput
  }

  export type SeasonScalarWhereWithAggregatesInput = {
    AND?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    OR?: SeasonScalarWhereWithAggregatesInput[]
    NOT?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Season"> | number
    year?: IntWithAggregatesFilter<"Season"> | number
    start?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    end?: DateTimeWithAggregatesFilter<"Season"> | Date | string
    current?: BoolWithAggregatesFilter<"Season"> | boolean
    leagueId?: IntWithAggregatesFilter<"Season"> | number
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    countryId?: IntFilter<"Team"> | number
    stadiumId?: IntNullableFilter<"Team"> | number | null
    coachId?: IntNullableFilter<"Team"> | number | null
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    stadium?: XOR<StadiumNullableRelationFilter, StadiumWhereInput> | null
    players?: PlayerListRelationFilter
    coach?: XOR<CoachNullableRelationFilter, CoachWhereInput> | null
    homeFixtures?: FixtureListRelationFilter
    awayFixtures?: FixtureListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrderInput | SortOrder
    coachId?: SortOrderInput | SortOrder
    country?: CountryOrderByWithRelationInput
    stadium?: StadiumOrderByWithRelationInput
    players?: PlayerOrderByRelationAggregateInput
    coach?: CoachOrderByWithRelationInput
    homeFixtures?: FixtureOrderByRelationAggregateInput
    awayFixtures?: FixtureOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    coachId?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    logo?: StringNullableFilter<"Team"> | string | null
    countryId?: IntFilter<"Team"> | number
    stadiumId?: IntNullableFilter<"Team"> | number | null
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    stadium?: XOR<StadiumNullableRelationFilter, StadiumWhereInput> | null
    players?: PlayerListRelationFilter
    coach?: XOR<CoachNullableRelationFilter, CoachWhereInput> | null
    homeFixtures?: FixtureListRelationFilter
    awayFixtures?: FixtureListRelationFilter
  }, "id" | "name" | "coachId">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrderInput | SortOrder
    coachId?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    logo?: StringNullableWithAggregatesFilter<"Team"> | string | null
    countryId?: IntWithAggregatesFilter<"Team"> | number
    stadiumId?: IntNullableWithAggregatesFilter<"Team"> | number | null
    coachId?: IntNullableWithAggregatesFilter<"Team"> | number | null
  }

  export type CoachWhereInput = {
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    id?: IntFilter<"Coach"> | number
    name?: StringFilter<"Coach"> | string
    nationality?: StringFilter<"Coach"> | string
    teamId?: IntNullableFilter<"Coach"> | number | null
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }

  export type CoachOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    teamId?: SortOrderInput | SortOrder
    team?: TeamOrderByWithRelationInput
  }

  export type CoachWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    teamId?: number
    AND?: CoachWhereInput | CoachWhereInput[]
    OR?: CoachWhereInput[]
    NOT?: CoachWhereInput | CoachWhereInput[]
    name?: StringFilter<"Coach"> | string
    nationality?: StringFilter<"Coach"> | string
    team?: XOR<TeamNullableRelationFilter, TeamWhereInput> | null
  }, "id" | "teamId">

  export type CoachOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    teamId?: SortOrderInput | SortOrder
    _count?: CoachCountOrderByAggregateInput
    _avg?: CoachAvgOrderByAggregateInput
    _max?: CoachMaxOrderByAggregateInput
    _min?: CoachMinOrderByAggregateInput
    _sum?: CoachSumOrderByAggregateInput
  }

  export type CoachScalarWhereWithAggregatesInput = {
    AND?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    OR?: CoachScalarWhereWithAggregatesInput[]
    NOT?: CoachScalarWhereWithAggregatesInput | CoachScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coach"> | number
    name?: StringWithAggregatesFilter<"Coach"> | string
    nationality?: StringWithAggregatesFilter<"Coach"> | string
    teamId?: IntNullableWithAggregatesFilter<"Coach"> | number | null
  }

  export type StadiumWhereInput = {
    AND?: StadiumWhereInput | StadiumWhereInput[]
    OR?: StadiumWhereInput[]
    NOT?: StadiumWhereInput | StadiumWhereInput[]
    id?: IntFilter<"Stadium"> | number
    name?: StringFilter<"Stadium"> | string
    city?: StringFilter<"Stadium"> | string
    teams?: TeamListRelationFilter
    fixtures?: FixtureListRelationFilter
  }

  export type StadiumOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    teams?: TeamOrderByRelationAggregateInput
    fixtures?: FixtureOrderByRelationAggregateInput
  }

  export type StadiumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: StadiumWhereInput | StadiumWhereInput[]
    OR?: StadiumWhereInput[]
    NOT?: StadiumWhereInput | StadiumWhereInput[]
    city?: StringFilter<"Stadium"> | string
    teams?: TeamListRelationFilter
    fixtures?: FixtureListRelationFilter
  }, "id" | "name">

  export type StadiumOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
    _count?: StadiumCountOrderByAggregateInput
    _avg?: StadiumAvgOrderByAggregateInput
    _max?: StadiumMaxOrderByAggregateInput
    _min?: StadiumMinOrderByAggregateInput
    _sum?: StadiumSumOrderByAggregateInput
  }

  export type StadiumScalarWhereWithAggregatesInput = {
    AND?: StadiumScalarWhereWithAggregatesInput | StadiumScalarWhereWithAggregatesInput[]
    OR?: StadiumScalarWhereWithAggregatesInput[]
    NOT?: StadiumScalarWhereWithAggregatesInput | StadiumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stadium"> | number
    name?: StringWithAggregatesFilter<"Stadium"> | string
    city?: StringWithAggregatesFilter<"Stadium"> | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    name?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    nationality?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    statistics?: StatisticListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    nationality?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    statistics?: StatisticOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    name?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    nationality?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    statistics?: StatisticListRelationFilter
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    nationality?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    name?: StringWithAggregatesFilter<"Player"> | string
    age?: IntWithAggregatesFilter<"Player"> | number
    nationality?: StringWithAggregatesFilter<"Player"> | string
    position?: StringWithAggregatesFilter<"Player"> | string
    teamId?: IntWithAggregatesFilter<"Player"> | number
  }

  export type StatisticWhereInput = {
    AND?: StatisticWhereInput | StatisticWhereInput[]
    OR?: StatisticWhereInput[]
    NOT?: StatisticWhereInput | StatisticWhereInput[]
    id?: IntFilter<"Statistic"> | number
    goals?: IntFilter<"Statistic"> | number
    assists?: IntFilter<"Statistic"> | number
    games?: IntFilter<"Statistic"> | number
    minutes?: IntFilter<"Statistic"> | number
    playerId?: IntFilter<"Statistic"> | number
    seasonId?: IntFilter<"Statistic"> | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  }

  export type StatisticOrderByWithRelationInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
    player?: PlayerOrderByWithRelationInput
    season?: SeasonOrderByWithRelationInput
  }

  export type StatisticWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatisticWhereInput | StatisticWhereInput[]
    OR?: StatisticWhereInput[]
    NOT?: StatisticWhereInput | StatisticWhereInput[]
    goals?: IntFilter<"Statistic"> | number
    assists?: IntFilter<"Statistic"> | number
    games?: IntFilter<"Statistic"> | number
    minutes?: IntFilter<"Statistic"> | number
    playerId?: IntFilter<"Statistic"> | number
    seasonId?: IntFilter<"Statistic"> | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
  }, "id">

  export type StatisticOrderByWithAggregationInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
    _count?: StatisticCountOrderByAggregateInput
    _avg?: StatisticAvgOrderByAggregateInput
    _max?: StatisticMaxOrderByAggregateInput
    _min?: StatisticMinOrderByAggregateInput
    _sum?: StatisticSumOrderByAggregateInput
  }

  export type StatisticScalarWhereWithAggregatesInput = {
    AND?: StatisticScalarWhereWithAggregatesInput | StatisticScalarWhereWithAggregatesInput[]
    OR?: StatisticScalarWhereWithAggregatesInput[]
    NOT?: StatisticScalarWhereWithAggregatesInput | StatisticScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Statistic"> | number
    goals?: IntWithAggregatesFilter<"Statistic"> | number
    assists?: IntWithAggregatesFilter<"Statistic"> | number
    games?: IntWithAggregatesFilter<"Statistic"> | number
    minutes?: IntWithAggregatesFilter<"Statistic"> | number
    playerId?: IntWithAggregatesFilter<"Statistic"> | number
    seasonId?: IntWithAggregatesFilter<"Statistic"> | number
  }

  export type FixtureWhereInput = {
    AND?: FixtureWhereInput | FixtureWhereInput[]
    OR?: FixtureWhereInput[]
    NOT?: FixtureWhereInput | FixtureWhereInput[]
    id?: IntFilter<"Fixture"> | number
    fixtureId?: IntFilter<"Fixture"> | number
    referee?: StringNullableFilter<"Fixture"> | string | null
    timezone?: StringFilter<"Fixture"> | string
    date?: DateTimeFilter<"Fixture"> | Date | string
    timestamp?: IntFilter<"Fixture"> | number
    status?: StringFilter<"Fixture"> | string
    elapsed?: IntFilter<"Fixture"> | number
    venueId?: IntFilter<"Fixture"> | number
    leagueId?: IntFilter<"Fixture"> | number
    seasonId?: IntFilter<"Fixture"> | number
    homeTeamId?: IntFilter<"Fixture"> | number
    awayTeamId?: IntFilter<"Fixture"> | number
    goalsHome?: IntNullableFilter<"Fixture"> | number | null
    goalsAway?: IntNullableFilter<"Fixture"> | number | null
    halftimeHome?: IntNullableFilter<"Fixture"> | number | null
    halftimeAway?: IntNullableFilter<"Fixture"> | number | null
    fulltimeHome?: IntNullableFilter<"Fixture"> | number | null
    fulltimeAway?: IntNullableFilter<"Fixture"> | number | null
    extratimeHome?: IntNullableFilter<"Fixture"> | number | null
    extratimeAway?: IntNullableFilter<"Fixture"> | number | null
    penaltyHome?: IntNullableFilter<"Fixture"> | number | null
    penaltyAway?: IntNullableFilter<"Fixture"> | number | null
    venue?: XOR<StadiumRelationFilter, StadiumWhereInput>
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    homeTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    awayTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type FixtureOrderByWithRelationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    referee?: SortOrderInput | SortOrder
    timezone?: SortOrder
    date?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrderInput | SortOrder
    goalsAway?: SortOrderInput | SortOrder
    halftimeHome?: SortOrderInput | SortOrder
    halftimeAway?: SortOrderInput | SortOrder
    fulltimeHome?: SortOrderInput | SortOrder
    fulltimeAway?: SortOrderInput | SortOrder
    extratimeHome?: SortOrderInput | SortOrder
    extratimeAway?: SortOrderInput | SortOrder
    penaltyHome?: SortOrderInput | SortOrder
    penaltyAway?: SortOrderInput | SortOrder
    venue?: StadiumOrderByWithRelationInput
    league?: LeagueOrderByWithRelationInput
    season?: SeasonOrderByWithRelationInput
    homeTeam?: TeamOrderByWithRelationInput
    awayTeam?: TeamOrderByWithRelationInput
  }

  export type FixtureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    fixtureId?: number
    AND?: FixtureWhereInput | FixtureWhereInput[]
    OR?: FixtureWhereInput[]
    NOT?: FixtureWhereInput | FixtureWhereInput[]
    referee?: StringNullableFilter<"Fixture"> | string | null
    timezone?: StringFilter<"Fixture"> | string
    date?: DateTimeFilter<"Fixture"> | Date | string
    timestamp?: IntFilter<"Fixture"> | number
    status?: StringFilter<"Fixture"> | string
    elapsed?: IntFilter<"Fixture"> | number
    venueId?: IntFilter<"Fixture"> | number
    leagueId?: IntFilter<"Fixture"> | number
    seasonId?: IntFilter<"Fixture"> | number
    homeTeamId?: IntFilter<"Fixture"> | number
    awayTeamId?: IntFilter<"Fixture"> | number
    goalsHome?: IntNullableFilter<"Fixture"> | number | null
    goalsAway?: IntNullableFilter<"Fixture"> | number | null
    halftimeHome?: IntNullableFilter<"Fixture"> | number | null
    halftimeAway?: IntNullableFilter<"Fixture"> | number | null
    fulltimeHome?: IntNullableFilter<"Fixture"> | number | null
    fulltimeAway?: IntNullableFilter<"Fixture"> | number | null
    extratimeHome?: IntNullableFilter<"Fixture"> | number | null
    extratimeAway?: IntNullableFilter<"Fixture"> | number | null
    penaltyHome?: IntNullableFilter<"Fixture"> | number | null
    penaltyAway?: IntNullableFilter<"Fixture"> | number | null
    venue?: XOR<StadiumRelationFilter, StadiumWhereInput>
    league?: XOR<LeagueRelationFilter, LeagueWhereInput>
    season?: XOR<SeasonRelationFilter, SeasonWhereInput>
    homeTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    awayTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id" | "fixtureId">

  export type FixtureOrderByWithAggregationInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    referee?: SortOrderInput | SortOrder
    timezone?: SortOrder
    date?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrderInput | SortOrder
    goalsAway?: SortOrderInput | SortOrder
    halftimeHome?: SortOrderInput | SortOrder
    halftimeAway?: SortOrderInput | SortOrder
    fulltimeHome?: SortOrderInput | SortOrder
    fulltimeAway?: SortOrderInput | SortOrder
    extratimeHome?: SortOrderInput | SortOrder
    extratimeAway?: SortOrderInput | SortOrder
    penaltyHome?: SortOrderInput | SortOrder
    penaltyAway?: SortOrderInput | SortOrder
    _count?: FixtureCountOrderByAggregateInput
    _avg?: FixtureAvgOrderByAggregateInput
    _max?: FixtureMaxOrderByAggregateInput
    _min?: FixtureMinOrderByAggregateInput
    _sum?: FixtureSumOrderByAggregateInput
  }

  export type FixtureScalarWhereWithAggregatesInput = {
    AND?: FixtureScalarWhereWithAggregatesInput | FixtureScalarWhereWithAggregatesInput[]
    OR?: FixtureScalarWhereWithAggregatesInput[]
    NOT?: FixtureScalarWhereWithAggregatesInput | FixtureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fixture"> | number
    fixtureId?: IntWithAggregatesFilter<"Fixture"> | number
    referee?: StringNullableWithAggregatesFilter<"Fixture"> | string | null
    timezone?: StringWithAggregatesFilter<"Fixture"> | string
    date?: DateTimeWithAggregatesFilter<"Fixture"> | Date | string
    timestamp?: IntWithAggregatesFilter<"Fixture"> | number
    status?: StringWithAggregatesFilter<"Fixture"> | string
    elapsed?: IntWithAggregatesFilter<"Fixture"> | number
    venueId?: IntWithAggregatesFilter<"Fixture"> | number
    leagueId?: IntWithAggregatesFilter<"Fixture"> | number
    seasonId?: IntWithAggregatesFilter<"Fixture"> | number
    homeTeamId?: IntWithAggregatesFilter<"Fixture"> | number
    awayTeamId?: IntWithAggregatesFilter<"Fixture"> | number
    goalsHome?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    goalsAway?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    halftimeHome?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    halftimeAway?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    fulltimeHome?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    fulltimeAway?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    extratimeHome?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    extratimeAway?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    penaltyHome?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
    penaltyAway?: IntNullableWithAggregatesFilter<"Fixture"> | number | null
  }

  export type CountryCreateInput = {
    name: string
    code?: string | null
    flag?: string | null
    leagues?: LeagueCreateNestedManyWithoutCountryInput
    teams?: TeamCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
    code?: string | null
    flag?: string | null
    leagues?: LeagueUncheckedCreateNestedManyWithoutCountryInput
    teams?: TeamUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    leagues?: LeagueUpdateManyWithoutCountryNestedInput
    teams?: TeamUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    leagues?: LeagueUncheckedUpdateManyWithoutCountryNestedInput
    teams?: TeamUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
    code?: string | null
    flag?: string | null
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeagueCreateInput = {
    name: string
    type: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutLeaguesInput
    seasons?: SeasonCreateNestedManyWithoutLeagueInput
    fixtures?: FixtureCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
    countryId: number
    seasons?: SeasonUncheckedCreateNestedManyWithoutLeagueInput
    fixtures?: FixtureUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    seasons?: SeasonUpdateManyWithoutLeagueNestedInput
    fixtures?: FixtureUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    seasons?: SeasonUncheckedUpdateManyWithoutLeagueNestedInput
    fixtures?: FixtureUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateManyInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
    countryId: number
  }

  export type LeagueUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeagueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonCreateInput = {
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    league: LeagueCreateNestedOneWithoutSeasonsInput
    statistics?: StatisticCreateNestedManyWithoutSeasonInput
    fixtures?: FixtureCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    leagueId: number
    statistics?: StatisticUncheckedCreateNestedManyWithoutSeasonInput
    fixtures?: FixtureUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    league?: LeagueUpdateOneRequiredWithoutSeasonsNestedInput
    statistics?: StatisticUpdateManyWithoutSeasonNestedInput
    fixtures?: FixtureUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    leagueId?: IntFieldUpdateOperationsInput | number
    statistics?: StatisticUncheckedUpdateManyWithoutSeasonNestedInput
    fixtures?: FixtureUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonCreateManyInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    leagueId: number
  }

  export type SeasonUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SeasonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    leagueId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamCreateInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    coachId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    coachId?: number | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CoachCreateInput = {
    name: string
    nationality: string
    teamId?: number | null
    team?: TeamCreateNestedOneWithoutCoachInput
  }

  export type CoachUncheckedCreateInput = {
    id?: number
    name: string
    nationality: string
    teamId?: number | null
    team?: TeamUncheckedCreateNestedOneWithoutCoachInput
  }

  export type CoachUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutCoachNestedInput
  }

  export type CoachUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUncheckedUpdateOneWithoutCoachNestedInput
  }

  export type CoachCreateManyInput = {
    id?: number
    name: string
    nationality: string
    teamId?: number | null
  }

  export type CoachUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CoachUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StadiumCreateInput = {
    name: string
    city: string
    teams?: TeamCreateNestedManyWithoutStadiumInput
    fixtures?: FixtureCreateNestedManyWithoutVenueInput
  }

  export type StadiumUncheckedCreateInput = {
    id?: number
    name: string
    city: string
    teams?: TeamUncheckedCreateNestedManyWithoutStadiumInput
    fixtures?: FixtureUncheckedCreateNestedManyWithoutVenueInput
  }

  export type StadiumUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    teams?: TeamUpdateManyWithoutStadiumNestedInput
    fixtures?: FixtureUpdateManyWithoutVenueNestedInput
  }

  export type StadiumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutStadiumNestedInput
    fixtures?: FixtureUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type StadiumCreateManyInput = {
    id?: number
    name: string
    city: string
  }

  export type StadiumUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type StadiumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateInput = {
    name: string
    age: number
    nationality: string
    position: string
    team: TeamCreateNestedOneWithoutPlayersInput
    statistics?: StatisticCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    name: string
    age: number
    nationality: string
    position: string
    teamId: number
    statistics?: StatisticUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    statistics?: StatisticUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    statistics?: StatisticUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    name: string
    age: number
    nationality: string
    position: string
    teamId: number
  }

  export type PlayerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticCreateInput = {
    goals: number
    assists: number
    games: number
    minutes: number
    player: PlayerCreateNestedOneWithoutStatisticsInput
    season: SeasonCreateNestedOneWithoutStatisticsInput
  }

  export type StatisticUncheckedCreateInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
    seasonId: number
  }

  export type StatisticUpdateInput = {
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    player?: PlayerUpdateOneRequiredWithoutStatisticsNestedInput
    season?: SeasonUpdateOneRequiredWithoutStatisticsNestedInput
  }

  export type StatisticUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticCreateManyInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
    seasonId: number
  }

  export type StatisticUpdateManyMutationInput = {
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }

  export type FixtureCreateInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    venue: StadiumCreateNestedOneWithoutFixturesInput
    league: LeagueCreateNestedOneWithoutFixturesInput
    season: SeasonCreateNestedOneWithoutFixturesInput
    homeTeam: TeamCreateNestedOneWithoutHomeFixturesInput
    awayTeam: TeamCreateNestedOneWithoutAwayFixturesInput
  }

  export type FixtureUncheckedCreateInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureUpdateInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    venue?: StadiumUpdateOneRequiredWithoutFixturesNestedInput
    league?: LeagueUpdateOneRequiredWithoutFixturesNestedInput
    season?: SeasonUpdateOneRequiredWithoutFixturesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeFixturesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayFixturesNestedInput
  }

  export type FixtureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureCreateManyInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureUpdateManyMutationInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type LeagueListRelationFilter = {
    every?: LeagueWhereInput
    some?: LeagueWhereInput
    none?: LeagueWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flag?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flag?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    flag?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CountryRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type SeasonListRelationFilter = {
    every?: SeasonWhereInput
    some?: SeasonWhereInput
    none?: SeasonWhereInput
  }

  export type FixtureListRelationFilter = {
    every?: FixtureWhereInput
    some?: FixtureWhereInput
    none?: FixtureWhereInput
  }

  export type SeasonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FixtureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeagueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
  }

  export type LeagueAvgOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
  }

  export type LeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
  }

  export type LeagueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
  }

  export type LeagueSumOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LeagueRelationFilter = {
    is?: LeagueWhereInput
    isNot?: LeagueWhereInput
  }

  export type StatisticListRelationFilter = {
    every?: StatisticWhereInput
    some?: StatisticWhereInput
    none?: StatisticWhereInput
  }

  export type StatisticOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    start?: SortOrder
    end?: SortOrder
    current?: SortOrder
    leagueId?: SortOrder
  }

  export type SeasonAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    leagueId?: SortOrder
  }

  export type SeasonMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    start?: SortOrder
    end?: SortOrder
    current?: SortOrder
    leagueId?: SortOrder
  }

  export type SeasonMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    start?: SortOrder
    end?: SortOrder
    current?: SortOrder
    leagueId?: SortOrder
  }

  export type SeasonSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    leagueId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StadiumNullableRelationFilter = {
    is?: StadiumWhereInput | null
    isNot?: StadiumWhereInput | null
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type CoachNullableRelationFilter = {
    is?: CoachWhereInput | null
    isNot?: CoachWhereInput | null
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrder
    coachId?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrder
    coachId?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrder
    coachId?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrder
    coachId?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
    stadiumId?: SortOrder
    coachId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TeamNullableRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type CoachCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    teamId?: SortOrder
  }

  export type CoachAvgOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type CoachMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    teamId?: SortOrder
  }

  export type CoachMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    teamId?: SortOrder
  }

  export type CoachSumOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
  }

  export type StadiumCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
  }

  export type StadiumAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StadiumMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
  }

  export type StadiumMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    city?: SortOrder
  }

  export type StadiumSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    nationality?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    nationality?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    nationality?: SortOrder
    position?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type SeasonRelationFilter = {
    is?: SeasonWhereInput
    isNot?: SeasonWhereInput
  }

  export type StatisticCountOrderByAggregateInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
  }

  export type StatisticAvgOrderByAggregateInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
  }

  export type StatisticMaxOrderByAggregateInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
  }

  export type StatisticMinOrderByAggregateInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
  }

  export type StatisticSumOrderByAggregateInput = {
    id?: SortOrder
    goals?: SortOrder
    assists?: SortOrder
    games?: SortOrder
    minutes?: SortOrder
    playerId?: SortOrder
    seasonId?: SortOrder
  }

  export type StadiumRelationFilter = {
    is?: StadiumWhereInput
    isNot?: StadiumWhereInput
  }

  export type FixtureCountOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    referee?: SortOrder
    timezone?: SortOrder
    date?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrder
    goalsAway?: SortOrder
    halftimeHome?: SortOrder
    halftimeAway?: SortOrder
    fulltimeHome?: SortOrder
    fulltimeAway?: SortOrder
    extratimeHome?: SortOrder
    extratimeAway?: SortOrder
    penaltyHome?: SortOrder
    penaltyAway?: SortOrder
  }

  export type FixtureAvgOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    timestamp?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrder
    goalsAway?: SortOrder
    halftimeHome?: SortOrder
    halftimeAway?: SortOrder
    fulltimeHome?: SortOrder
    fulltimeAway?: SortOrder
    extratimeHome?: SortOrder
    extratimeAway?: SortOrder
    penaltyHome?: SortOrder
    penaltyAway?: SortOrder
  }

  export type FixtureMaxOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    referee?: SortOrder
    timezone?: SortOrder
    date?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrder
    goalsAway?: SortOrder
    halftimeHome?: SortOrder
    halftimeAway?: SortOrder
    fulltimeHome?: SortOrder
    fulltimeAway?: SortOrder
    extratimeHome?: SortOrder
    extratimeAway?: SortOrder
    penaltyHome?: SortOrder
    penaltyAway?: SortOrder
  }

  export type FixtureMinOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    referee?: SortOrder
    timezone?: SortOrder
    date?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrder
    goalsAway?: SortOrder
    halftimeHome?: SortOrder
    halftimeAway?: SortOrder
    fulltimeHome?: SortOrder
    fulltimeAway?: SortOrder
    extratimeHome?: SortOrder
    extratimeAway?: SortOrder
    penaltyHome?: SortOrder
    penaltyAway?: SortOrder
  }

  export type FixtureSumOrderByAggregateInput = {
    id?: SortOrder
    fixtureId?: SortOrder
    timestamp?: SortOrder
    elapsed?: SortOrder
    venueId?: SortOrder
    leagueId?: SortOrder
    seasonId?: SortOrder
    homeTeamId?: SortOrder
    awayTeamId?: SortOrder
    goalsHome?: SortOrder
    goalsAway?: SortOrder
    halftimeHome?: SortOrder
    halftimeAway?: SortOrder
    fulltimeHome?: SortOrder
    fulltimeAway?: SortOrder
    extratimeHome?: SortOrder
    extratimeAway?: SortOrder
    penaltyHome?: SortOrder
    penaltyAway?: SortOrder
  }

  export type LeagueCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutCountryInput = {
    create?: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput> | TeamCreateWithoutCountryInput[] | TeamUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutCountryInput | TeamCreateOrConnectWithoutCountryInput[]
    createMany?: TeamCreateManyCountryInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput> | TeamCreateWithoutCountryInput[] | TeamUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutCountryInput | TeamCreateOrConnectWithoutCountryInput[]
    createMany?: TeamCreateManyCountryInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type LeagueUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutCountryNestedInput = {
    create?: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput> | TeamCreateWithoutCountryInput[] | TeamUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutCountryInput | TeamCreateOrConnectWithoutCountryInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutCountryInput | TeamUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: TeamCreateManyCountryInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutCountryInput | TeamUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutCountryInput | TeamUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LeagueUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput> | TeamCreateWithoutCountryInput[] | TeamUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutCountryInput | TeamCreateOrConnectWithoutCountryInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutCountryInput | TeamUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: TeamCreateManyCountryInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutCountryInput | TeamUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutCountryInput | TeamUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
  }

  export type SeasonCreateNestedManyWithoutLeagueInput = {
    create?: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput> | SeasonCreateWithoutLeagueInput[] | SeasonUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutLeagueInput | SeasonCreateOrConnectWithoutLeagueInput[]
    createMany?: SeasonCreateManyLeagueInputEnvelope
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
  }

  export type FixtureCreateNestedManyWithoutLeagueInput = {
    create?: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput> | FixtureCreateWithoutLeagueInput[] | FixtureUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutLeagueInput | FixtureCreateOrConnectWithoutLeagueInput[]
    createMany?: FixtureCreateManyLeagueInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type SeasonUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput> | SeasonCreateWithoutLeagueInput[] | SeasonUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutLeagueInput | SeasonCreateOrConnectWithoutLeagueInput[]
    createMany?: SeasonCreateManyLeagueInputEnvelope
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
  }

  export type FixtureUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput> | FixtureCreateWithoutLeagueInput[] | FixtureUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutLeagueInput | FixtureCreateOrConnectWithoutLeagueInput[]
    createMany?: FixtureCreateManyLeagueInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    upsert?: CountryUpsertWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutLeaguesInput, CountryUpdateWithoutLeaguesInput>, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type SeasonUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput> | SeasonCreateWithoutLeagueInput[] | SeasonUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutLeagueInput | SeasonCreateOrConnectWithoutLeagueInput[]
    upsert?: SeasonUpsertWithWhereUniqueWithoutLeagueInput | SeasonUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: SeasonCreateManyLeagueInputEnvelope
    set?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    disconnect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    delete?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    update?: SeasonUpdateWithWhereUniqueWithoutLeagueInput | SeasonUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: SeasonUpdateManyWithWhereWithoutLeagueInput | SeasonUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
  }

  export type FixtureUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput> | FixtureCreateWithoutLeagueInput[] | FixtureUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutLeagueInput | FixtureCreateOrConnectWithoutLeagueInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutLeagueInput | FixtureUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: FixtureCreateManyLeagueInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutLeagueInput | FixtureUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutLeagueInput | FixtureUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type SeasonUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput> | SeasonCreateWithoutLeagueInput[] | SeasonUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutLeagueInput | SeasonCreateOrConnectWithoutLeagueInput[]
    upsert?: SeasonUpsertWithWhereUniqueWithoutLeagueInput | SeasonUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: SeasonCreateManyLeagueInputEnvelope
    set?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    disconnect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    delete?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    update?: SeasonUpdateWithWhereUniqueWithoutLeagueInput | SeasonUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: SeasonUpdateManyWithWhereWithoutLeagueInput | SeasonUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
  }

  export type FixtureUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput> | FixtureCreateWithoutLeagueInput[] | FixtureUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutLeagueInput | FixtureCreateOrConnectWithoutLeagueInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutLeagueInput | FixtureUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: FixtureCreateManyLeagueInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutLeagueInput | FixtureUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutLeagueInput | FixtureUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type LeagueCreateNestedOneWithoutSeasonsInput = {
    create?: XOR<LeagueCreateWithoutSeasonsInput, LeagueUncheckedCreateWithoutSeasonsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonsInput
    connect?: LeagueWhereUniqueInput
  }

  export type StatisticCreateNestedManyWithoutSeasonInput = {
    create?: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput> | StatisticCreateWithoutSeasonInput[] | StatisticUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutSeasonInput | StatisticCreateOrConnectWithoutSeasonInput[]
    createMany?: StatisticCreateManySeasonInputEnvelope
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
  }

  export type FixtureCreateNestedManyWithoutSeasonInput = {
    create?: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput> | FixtureCreateWithoutSeasonInput[] | FixtureUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutSeasonInput | FixtureCreateOrConnectWithoutSeasonInput[]
    createMany?: FixtureCreateManySeasonInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type StatisticUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput> | StatisticCreateWithoutSeasonInput[] | StatisticUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutSeasonInput | StatisticCreateOrConnectWithoutSeasonInput[]
    createMany?: StatisticCreateManySeasonInputEnvelope
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
  }

  export type FixtureUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput> | FixtureCreateWithoutSeasonInput[] | FixtureUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutSeasonInput | FixtureCreateOrConnectWithoutSeasonInput[]
    createMany?: FixtureCreateManySeasonInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type LeagueUpdateOneRequiredWithoutSeasonsNestedInput = {
    create?: XOR<LeagueCreateWithoutSeasonsInput, LeagueUncheckedCreateWithoutSeasonsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutSeasonsInput
    upsert?: LeagueUpsertWithoutSeasonsInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutSeasonsInput, LeagueUpdateWithoutSeasonsInput>, LeagueUncheckedUpdateWithoutSeasonsInput>
  }

  export type StatisticUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput> | StatisticCreateWithoutSeasonInput[] | StatisticUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutSeasonInput | StatisticCreateOrConnectWithoutSeasonInput[]
    upsert?: StatisticUpsertWithWhereUniqueWithoutSeasonInput | StatisticUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: StatisticCreateManySeasonInputEnvelope
    set?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    disconnect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    delete?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    update?: StatisticUpdateWithWhereUniqueWithoutSeasonInput | StatisticUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: StatisticUpdateManyWithWhereWithoutSeasonInput | StatisticUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
  }

  export type FixtureUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput> | FixtureCreateWithoutSeasonInput[] | FixtureUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutSeasonInput | FixtureCreateOrConnectWithoutSeasonInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutSeasonInput | FixtureUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: FixtureCreateManySeasonInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutSeasonInput | FixtureUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutSeasonInput | FixtureUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type StatisticUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput> | StatisticCreateWithoutSeasonInput[] | StatisticUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutSeasonInput | StatisticCreateOrConnectWithoutSeasonInput[]
    upsert?: StatisticUpsertWithWhereUniqueWithoutSeasonInput | StatisticUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: StatisticCreateManySeasonInputEnvelope
    set?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    disconnect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    delete?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    update?: StatisticUpdateWithWhereUniqueWithoutSeasonInput | StatisticUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: StatisticUpdateManyWithWhereWithoutSeasonInput | StatisticUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
  }

  export type FixtureUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput> | FixtureCreateWithoutSeasonInput[] | FixtureUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutSeasonInput | FixtureCreateOrConnectWithoutSeasonInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutSeasonInput | FixtureUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: FixtureCreateManySeasonInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutSeasonInput | FixtureUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutSeasonInput | FixtureUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutTeamsInput = {
    create?: XOR<CountryCreateWithoutTeamsInput, CountryUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutTeamsInput
    connect?: CountryWhereUniqueInput
  }

  export type StadiumCreateNestedOneWithoutTeamsInput = {
    create?: XOR<StadiumCreateWithoutTeamsInput, StadiumUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: StadiumCreateOrConnectWithoutTeamsInput
    connect?: StadiumWhereUniqueInput
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type CoachCreateNestedOneWithoutTeamInput = {
    create?: XOR<CoachCreateWithoutTeamInput, CoachUncheckedCreateWithoutTeamInput>
    connectOrCreate?: CoachCreateOrConnectWithoutTeamInput
    connect?: CoachWhereUniqueInput
  }

  export type FixtureCreateNestedManyWithoutHomeTeamInput = {
    create?: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput> | FixtureCreateWithoutHomeTeamInput[] | FixtureUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutHomeTeamInput | FixtureCreateOrConnectWithoutHomeTeamInput[]
    createMany?: FixtureCreateManyHomeTeamInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type FixtureCreateNestedManyWithoutAwayTeamInput = {
    create?: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput> | FixtureCreateWithoutAwayTeamInput[] | FixtureUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutAwayTeamInput | FixtureCreateOrConnectWithoutAwayTeamInput[]
    createMany?: FixtureCreateManyAwayTeamInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type FixtureUncheckedCreateNestedManyWithoutHomeTeamInput = {
    create?: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput> | FixtureCreateWithoutHomeTeamInput[] | FixtureUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutHomeTeamInput | FixtureCreateOrConnectWithoutHomeTeamInput[]
    createMany?: FixtureCreateManyHomeTeamInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type FixtureUncheckedCreateNestedManyWithoutAwayTeamInput = {
    create?: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput> | FixtureCreateWithoutAwayTeamInput[] | FixtureUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutAwayTeamInput | FixtureCreateOrConnectWithoutAwayTeamInput[]
    createMany?: FixtureCreateManyAwayTeamInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<CountryCreateWithoutTeamsInput, CountryUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutTeamsInput
    upsert?: CountryUpsertWithoutTeamsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutTeamsInput, CountryUpdateWithoutTeamsInput>, CountryUncheckedUpdateWithoutTeamsInput>
  }

  export type StadiumUpdateOneWithoutTeamsNestedInput = {
    create?: XOR<StadiumCreateWithoutTeamsInput, StadiumUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: StadiumCreateOrConnectWithoutTeamsInput
    upsert?: StadiumUpsertWithoutTeamsInput
    disconnect?: StadiumWhereInput | boolean
    delete?: StadiumWhereInput | boolean
    connect?: StadiumWhereUniqueInput
    update?: XOR<XOR<StadiumUpdateToOneWithWhereWithoutTeamsInput, StadiumUpdateWithoutTeamsInput>, StadiumUncheckedUpdateWithoutTeamsInput>
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type CoachUpdateOneWithoutTeamNestedInput = {
    create?: XOR<CoachCreateWithoutTeamInput, CoachUncheckedCreateWithoutTeamInput>
    connectOrCreate?: CoachCreateOrConnectWithoutTeamInput
    upsert?: CoachUpsertWithoutTeamInput
    disconnect?: CoachWhereInput | boolean
    delete?: CoachWhereInput | boolean
    connect?: CoachWhereUniqueInput
    update?: XOR<XOR<CoachUpdateToOneWithWhereWithoutTeamInput, CoachUpdateWithoutTeamInput>, CoachUncheckedUpdateWithoutTeamInput>
  }

  export type FixtureUpdateManyWithoutHomeTeamNestedInput = {
    create?: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput> | FixtureCreateWithoutHomeTeamInput[] | FixtureUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutHomeTeamInput | FixtureCreateOrConnectWithoutHomeTeamInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutHomeTeamInput | FixtureUpsertWithWhereUniqueWithoutHomeTeamInput[]
    createMany?: FixtureCreateManyHomeTeamInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutHomeTeamInput | FixtureUpdateWithWhereUniqueWithoutHomeTeamInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutHomeTeamInput | FixtureUpdateManyWithWhereWithoutHomeTeamInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type FixtureUpdateManyWithoutAwayTeamNestedInput = {
    create?: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput> | FixtureCreateWithoutAwayTeamInput[] | FixtureUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutAwayTeamInput | FixtureCreateOrConnectWithoutAwayTeamInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutAwayTeamInput | FixtureUpsertWithWhereUniqueWithoutAwayTeamInput[]
    createMany?: FixtureCreateManyAwayTeamInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutAwayTeamInput | FixtureUpdateWithWhereUniqueWithoutAwayTeamInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutAwayTeamInput | FixtureUpdateManyWithWhereWithoutAwayTeamInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput = {
    create?: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput> | FixtureCreateWithoutHomeTeamInput[] | FixtureUncheckedCreateWithoutHomeTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutHomeTeamInput | FixtureCreateOrConnectWithoutHomeTeamInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutHomeTeamInput | FixtureUpsertWithWhereUniqueWithoutHomeTeamInput[]
    createMany?: FixtureCreateManyHomeTeamInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutHomeTeamInput | FixtureUpdateWithWhereUniqueWithoutHomeTeamInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutHomeTeamInput | FixtureUpdateManyWithWhereWithoutHomeTeamInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput = {
    create?: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput> | FixtureCreateWithoutAwayTeamInput[] | FixtureUncheckedCreateWithoutAwayTeamInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutAwayTeamInput | FixtureCreateOrConnectWithoutAwayTeamInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutAwayTeamInput | FixtureUpsertWithWhereUniqueWithoutAwayTeamInput[]
    createMany?: FixtureCreateManyAwayTeamInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutAwayTeamInput | FixtureUpdateWithWhereUniqueWithoutAwayTeamInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutAwayTeamInput | FixtureUpdateManyWithWhereWithoutAwayTeamInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutCoachInput = {
    create?: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUncheckedCreateNestedOneWithoutCoachInput = {
    create?: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneWithoutCoachNestedInput = {
    create?: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachInput
    upsert?: TeamUpsertWithoutCoachInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutCoachInput, TeamUpdateWithoutCoachInput>, TeamUncheckedUpdateWithoutCoachInput>
  }

  export type TeamUncheckedUpdateOneWithoutCoachNestedInput = {
    create?: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCoachInput
    upsert?: TeamUpsertWithoutCoachInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutCoachInput, TeamUpdateWithoutCoachInput>, TeamUncheckedUpdateWithoutCoachInput>
  }

  export type TeamCreateNestedManyWithoutStadiumInput = {
    create?: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput> | TeamCreateWithoutStadiumInput[] | TeamUncheckedCreateWithoutStadiumInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutStadiumInput | TeamCreateOrConnectWithoutStadiumInput[]
    createMany?: TeamCreateManyStadiumInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type FixtureCreateNestedManyWithoutVenueInput = {
    create?: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput> | FixtureCreateWithoutVenueInput[] | FixtureUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutVenueInput | FixtureCreateOrConnectWithoutVenueInput[]
    createMany?: FixtureCreateManyVenueInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutStadiumInput = {
    create?: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput> | TeamCreateWithoutStadiumInput[] | TeamUncheckedCreateWithoutStadiumInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutStadiumInput | TeamCreateOrConnectWithoutStadiumInput[]
    createMany?: TeamCreateManyStadiumInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type FixtureUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput> | FixtureCreateWithoutVenueInput[] | FixtureUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutVenueInput | FixtureCreateOrConnectWithoutVenueInput[]
    createMany?: FixtureCreateManyVenueInputEnvelope
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
  }

  export type TeamUpdateManyWithoutStadiumNestedInput = {
    create?: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput> | TeamCreateWithoutStadiumInput[] | TeamUncheckedCreateWithoutStadiumInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutStadiumInput | TeamCreateOrConnectWithoutStadiumInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutStadiumInput | TeamUpsertWithWhereUniqueWithoutStadiumInput[]
    createMany?: TeamCreateManyStadiumInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutStadiumInput | TeamUpdateWithWhereUniqueWithoutStadiumInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutStadiumInput | TeamUpdateManyWithWhereWithoutStadiumInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type FixtureUpdateManyWithoutVenueNestedInput = {
    create?: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput> | FixtureCreateWithoutVenueInput[] | FixtureUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutVenueInput | FixtureCreateOrConnectWithoutVenueInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutVenueInput | FixtureUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: FixtureCreateManyVenueInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutVenueInput | FixtureUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutVenueInput | FixtureUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutStadiumNestedInput = {
    create?: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput> | TeamCreateWithoutStadiumInput[] | TeamUncheckedCreateWithoutStadiumInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutStadiumInput | TeamCreateOrConnectWithoutStadiumInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutStadiumInput | TeamUpsertWithWhereUniqueWithoutStadiumInput[]
    createMany?: TeamCreateManyStadiumInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutStadiumInput | TeamUpdateWithWhereUniqueWithoutStadiumInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutStadiumInput | TeamUpdateManyWithWhereWithoutStadiumInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type FixtureUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput> | FixtureCreateWithoutVenueInput[] | FixtureUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: FixtureCreateOrConnectWithoutVenueInput | FixtureCreateOrConnectWithoutVenueInput[]
    upsert?: FixtureUpsertWithWhereUniqueWithoutVenueInput | FixtureUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: FixtureCreateManyVenueInputEnvelope
    set?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    disconnect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    delete?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    connect?: FixtureWhereUniqueInput | FixtureWhereUniqueInput[]
    update?: FixtureUpdateWithWhereUniqueWithoutVenueInput | FixtureUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: FixtureUpdateManyWithWhereWithoutVenueInput | FixtureUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutPlayersInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    connect?: TeamWhereUniqueInput
  }

  export type StatisticCreateNestedManyWithoutPlayerInput = {
    create?: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput> | StatisticCreateWithoutPlayerInput[] | StatisticUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutPlayerInput | StatisticCreateOrConnectWithoutPlayerInput[]
    createMany?: StatisticCreateManyPlayerInputEnvelope
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
  }

  export type StatisticUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput> | StatisticCreateWithoutPlayerInput[] | StatisticUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutPlayerInput | StatisticCreateOrConnectWithoutPlayerInput[]
    createMany?: StatisticCreateManyPlayerInputEnvelope
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    upsert?: TeamUpsertWithoutPlayersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPlayersInput, TeamUpdateWithoutPlayersInput>, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type StatisticUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput> | StatisticCreateWithoutPlayerInput[] | StatisticUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutPlayerInput | StatisticCreateOrConnectWithoutPlayerInput[]
    upsert?: StatisticUpsertWithWhereUniqueWithoutPlayerInput | StatisticUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: StatisticCreateManyPlayerInputEnvelope
    set?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    disconnect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    delete?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    update?: StatisticUpdateWithWhereUniqueWithoutPlayerInput | StatisticUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: StatisticUpdateManyWithWhereWithoutPlayerInput | StatisticUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
  }

  export type StatisticUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput> | StatisticCreateWithoutPlayerInput[] | StatisticUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: StatisticCreateOrConnectWithoutPlayerInput | StatisticCreateOrConnectWithoutPlayerInput[]
    upsert?: StatisticUpsertWithWhereUniqueWithoutPlayerInput | StatisticUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: StatisticCreateManyPlayerInputEnvelope
    set?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    disconnect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    delete?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    connect?: StatisticWhereUniqueInput | StatisticWhereUniqueInput[]
    update?: StatisticUpdateWithWhereUniqueWithoutPlayerInput | StatisticUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: StatisticUpdateManyWithWhereWithoutPlayerInput | StatisticUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<PlayerCreateWithoutStatisticsInput, PlayerUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatisticsInput
    connect?: PlayerWhereUniqueInput
  }

  export type SeasonCreateNestedOneWithoutStatisticsInput = {
    create?: XOR<SeasonCreateWithoutStatisticsInput, SeasonUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutStatisticsInput
    connect?: SeasonWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutStatisticsNestedInput = {
    create?: XOR<PlayerCreateWithoutStatisticsInput, PlayerUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatisticsInput
    upsert?: PlayerUpsertWithoutStatisticsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutStatisticsInput, PlayerUpdateWithoutStatisticsInput>, PlayerUncheckedUpdateWithoutStatisticsInput>
  }

  export type SeasonUpdateOneRequiredWithoutStatisticsNestedInput = {
    create?: XOR<SeasonCreateWithoutStatisticsInput, SeasonUncheckedCreateWithoutStatisticsInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutStatisticsInput
    upsert?: SeasonUpsertWithoutStatisticsInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutStatisticsInput, SeasonUpdateWithoutStatisticsInput>, SeasonUncheckedUpdateWithoutStatisticsInput>
  }

  export type StadiumCreateNestedOneWithoutFixturesInput = {
    create?: XOR<StadiumCreateWithoutFixturesInput, StadiumUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: StadiumCreateOrConnectWithoutFixturesInput
    connect?: StadiumWhereUniqueInput
  }

  export type LeagueCreateNestedOneWithoutFixturesInput = {
    create?: XOR<LeagueCreateWithoutFixturesInput, LeagueUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutFixturesInput
    connect?: LeagueWhereUniqueInput
  }

  export type SeasonCreateNestedOneWithoutFixturesInput = {
    create?: XOR<SeasonCreateWithoutFixturesInput, SeasonUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutFixturesInput
    connect?: SeasonWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutHomeFixturesInput = {
    create?: XOR<TeamCreateWithoutHomeFixturesInput, TeamUncheckedCreateWithoutHomeFixturesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeFixturesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutAwayFixturesInput = {
    create?: XOR<TeamCreateWithoutAwayFixturesInput, TeamUncheckedCreateWithoutAwayFixturesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayFixturesInput
    connect?: TeamWhereUniqueInput
  }

  export type StadiumUpdateOneRequiredWithoutFixturesNestedInput = {
    create?: XOR<StadiumCreateWithoutFixturesInput, StadiumUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: StadiumCreateOrConnectWithoutFixturesInput
    upsert?: StadiumUpsertWithoutFixturesInput
    connect?: StadiumWhereUniqueInput
    update?: XOR<XOR<StadiumUpdateToOneWithWhereWithoutFixturesInput, StadiumUpdateWithoutFixturesInput>, StadiumUncheckedUpdateWithoutFixturesInput>
  }

  export type LeagueUpdateOneRequiredWithoutFixturesNestedInput = {
    create?: XOR<LeagueCreateWithoutFixturesInput, LeagueUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutFixturesInput
    upsert?: LeagueUpsertWithoutFixturesInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutFixturesInput, LeagueUpdateWithoutFixturesInput>, LeagueUncheckedUpdateWithoutFixturesInput>
  }

  export type SeasonUpdateOneRequiredWithoutFixturesNestedInput = {
    create?: XOR<SeasonCreateWithoutFixturesInput, SeasonUncheckedCreateWithoutFixturesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutFixturesInput
    upsert?: SeasonUpsertWithoutFixturesInput
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutFixturesInput, SeasonUpdateWithoutFixturesInput>, SeasonUncheckedUpdateWithoutFixturesInput>
  }

  export type TeamUpdateOneRequiredWithoutHomeFixturesNestedInput = {
    create?: XOR<TeamCreateWithoutHomeFixturesInput, TeamUncheckedCreateWithoutHomeFixturesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeFixturesInput
    upsert?: TeamUpsertWithoutHomeFixturesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutHomeFixturesInput, TeamUpdateWithoutHomeFixturesInput>, TeamUncheckedUpdateWithoutHomeFixturesInput>
  }

  export type TeamUpdateOneRequiredWithoutAwayFixturesNestedInput = {
    create?: XOR<TeamCreateWithoutAwayFixturesInput, TeamUncheckedCreateWithoutAwayFixturesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayFixturesInput
    upsert?: TeamUpsertWithoutAwayFixturesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutAwayFixturesInput, TeamUpdateWithoutAwayFixturesInput>, TeamUncheckedUpdateWithoutAwayFixturesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type LeagueCreateWithoutCountryInput = {
    name: string
    type: string
    logo?: string | null
    seasons?: SeasonCreateNestedManyWithoutLeagueInput
    fixtures?: FixtureCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutCountryInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
    seasons?: SeasonUncheckedCreateNestedManyWithoutLeagueInput
    fixtures?: FixtureUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueCreateManyCountryInputEnvelope = {
    data: LeagueCreateManyCountryInput | LeagueCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutCountryInput = {
    name: string
    logo?: string | null
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutCountryInput = {
    id?: number
    name: string
    logo?: string | null
    stadiumId?: number | null
    coachId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutCountryInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput>
  }

  export type TeamCreateManyCountryInputEnvelope = {
    data: TeamCreateManyCountryInput | TeamCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type LeagueUpsertWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
  }

  export type LeagueUpdateManyWithWhereWithoutCountryInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutCountryInput>
  }

  export type LeagueScalarWhereInput = {
    AND?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    OR?: LeagueScalarWhereInput[]
    NOT?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    id?: IntFilter<"League"> | number
    name?: StringFilter<"League"> | string
    type?: StringFilter<"League"> | string
    logo?: StringNullableFilter<"League"> | string | null
    countryId?: IntFilter<"League"> | number
  }

  export type TeamUpsertWithWhereUniqueWithoutCountryInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutCountryInput, TeamUncheckedUpdateWithoutCountryInput>
    create: XOR<TeamCreateWithoutCountryInput, TeamUncheckedCreateWithoutCountryInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutCountryInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutCountryInput, TeamUncheckedUpdateWithoutCountryInput>
  }

  export type TeamUpdateManyWithWhereWithoutCountryInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutCountryInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    countryId?: IntFilter<"Team"> | number
    stadiumId?: IntNullableFilter<"Team"> | number | null
    coachId?: IntNullableFilter<"Team"> | number | null
  }

  export type CountryCreateWithoutLeaguesInput = {
    name: string
    code?: string | null
    flag?: string | null
    teams?: TeamCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutLeaguesInput = {
    id?: number
    name: string
    code?: string | null
    flag?: string | null
    teams?: TeamUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutLeaguesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
  }

  export type SeasonCreateWithoutLeagueInput = {
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    statistics?: StatisticCreateNestedManyWithoutSeasonInput
    fixtures?: FixtureCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutLeagueInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    statistics?: StatisticUncheckedCreateNestedManyWithoutSeasonInput
    fixtures?: FixtureUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutLeagueInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput>
  }

  export type SeasonCreateManyLeagueInputEnvelope = {
    data: SeasonCreateManyLeagueInput | SeasonCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type FixtureCreateWithoutLeagueInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    venue: StadiumCreateNestedOneWithoutFixturesInput
    season: SeasonCreateNestedOneWithoutFixturesInput
    homeTeam: TeamCreateNestedOneWithoutHomeFixturesInput
    awayTeam: TeamCreateNestedOneWithoutAwayFixturesInput
  }

  export type FixtureUncheckedCreateWithoutLeagueInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateOrConnectWithoutLeagueInput = {
    where: FixtureWhereUniqueInput
    create: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput>
  }

  export type FixtureCreateManyLeagueInputEnvelope = {
    data: FixtureCreateManyLeagueInput | FixtureCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutLeaguesInput = {
    update: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type CountryUpdateWithoutLeaguesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    teams?: TeamUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutLeaguesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    teams?: TeamUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type SeasonUpsertWithWhereUniqueWithoutLeagueInput = {
    where: SeasonWhereUniqueInput
    update: XOR<SeasonUpdateWithoutLeagueInput, SeasonUncheckedUpdateWithoutLeagueInput>
    create: XOR<SeasonCreateWithoutLeagueInput, SeasonUncheckedCreateWithoutLeagueInput>
  }

  export type SeasonUpdateWithWhereUniqueWithoutLeagueInput = {
    where: SeasonWhereUniqueInput
    data: XOR<SeasonUpdateWithoutLeagueInput, SeasonUncheckedUpdateWithoutLeagueInput>
  }

  export type SeasonUpdateManyWithWhereWithoutLeagueInput = {
    where: SeasonScalarWhereInput
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyWithoutLeagueInput>
  }

  export type SeasonScalarWhereInput = {
    AND?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
    OR?: SeasonScalarWhereInput[]
    NOT?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
    id?: IntFilter<"Season"> | number
    year?: IntFilter<"Season"> | number
    start?: DateTimeFilter<"Season"> | Date | string
    end?: DateTimeFilter<"Season"> | Date | string
    current?: BoolFilter<"Season"> | boolean
    leagueId?: IntFilter<"Season"> | number
  }

  export type FixtureUpsertWithWhereUniqueWithoutLeagueInput = {
    where: FixtureWhereUniqueInput
    update: XOR<FixtureUpdateWithoutLeagueInput, FixtureUncheckedUpdateWithoutLeagueInput>
    create: XOR<FixtureCreateWithoutLeagueInput, FixtureUncheckedCreateWithoutLeagueInput>
  }

  export type FixtureUpdateWithWhereUniqueWithoutLeagueInput = {
    where: FixtureWhereUniqueInput
    data: XOR<FixtureUpdateWithoutLeagueInput, FixtureUncheckedUpdateWithoutLeagueInput>
  }

  export type FixtureUpdateManyWithWhereWithoutLeagueInput = {
    where: FixtureScalarWhereInput
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyWithoutLeagueInput>
  }

  export type FixtureScalarWhereInput = {
    AND?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
    OR?: FixtureScalarWhereInput[]
    NOT?: FixtureScalarWhereInput | FixtureScalarWhereInput[]
    id?: IntFilter<"Fixture"> | number
    fixtureId?: IntFilter<"Fixture"> | number
    referee?: StringNullableFilter<"Fixture"> | string | null
    timezone?: StringFilter<"Fixture"> | string
    date?: DateTimeFilter<"Fixture"> | Date | string
    timestamp?: IntFilter<"Fixture"> | number
    status?: StringFilter<"Fixture"> | string
    elapsed?: IntFilter<"Fixture"> | number
    venueId?: IntFilter<"Fixture"> | number
    leagueId?: IntFilter<"Fixture"> | number
    seasonId?: IntFilter<"Fixture"> | number
    homeTeamId?: IntFilter<"Fixture"> | number
    awayTeamId?: IntFilter<"Fixture"> | number
    goalsHome?: IntNullableFilter<"Fixture"> | number | null
    goalsAway?: IntNullableFilter<"Fixture"> | number | null
    halftimeHome?: IntNullableFilter<"Fixture"> | number | null
    halftimeAway?: IntNullableFilter<"Fixture"> | number | null
    fulltimeHome?: IntNullableFilter<"Fixture"> | number | null
    fulltimeAway?: IntNullableFilter<"Fixture"> | number | null
    extratimeHome?: IntNullableFilter<"Fixture"> | number | null
    extratimeAway?: IntNullableFilter<"Fixture"> | number | null
    penaltyHome?: IntNullableFilter<"Fixture"> | number | null
    penaltyAway?: IntNullableFilter<"Fixture"> | number | null
  }

  export type LeagueCreateWithoutSeasonsInput = {
    name: string
    type: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutLeaguesInput
    fixtures?: FixtureCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutSeasonsInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
    countryId: number
    fixtures?: FixtureUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutSeasonsInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutSeasonsInput, LeagueUncheckedCreateWithoutSeasonsInput>
  }

  export type StatisticCreateWithoutSeasonInput = {
    goals: number
    assists: number
    games: number
    minutes: number
    player: PlayerCreateNestedOneWithoutStatisticsInput
  }

  export type StatisticUncheckedCreateWithoutSeasonInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
  }

  export type StatisticCreateOrConnectWithoutSeasonInput = {
    where: StatisticWhereUniqueInput
    create: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput>
  }

  export type StatisticCreateManySeasonInputEnvelope = {
    data: StatisticCreateManySeasonInput | StatisticCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type FixtureCreateWithoutSeasonInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    venue: StadiumCreateNestedOneWithoutFixturesInput
    league: LeagueCreateNestedOneWithoutFixturesInput
    homeTeam: TeamCreateNestedOneWithoutHomeFixturesInput
    awayTeam: TeamCreateNestedOneWithoutAwayFixturesInput
  }

  export type FixtureUncheckedCreateWithoutSeasonInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateOrConnectWithoutSeasonInput = {
    where: FixtureWhereUniqueInput
    create: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput>
  }

  export type FixtureCreateManySeasonInputEnvelope = {
    data: FixtureCreateManySeasonInput | FixtureCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type LeagueUpsertWithoutSeasonsInput = {
    update: XOR<LeagueUpdateWithoutSeasonsInput, LeagueUncheckedUpdateWithoutSeasonsInput>
    create: XOR<LeagueCreateWithoutSeasonsInput, LeagueUncheckedCreateWithoutSeasonsInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutSeasonsInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutSeasonsInput, LeagueUncheckedUpdateWithoutSeasonsInput>
  }

  export type LeagueUpdateWithoutSeasonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    fixtures?: FixtureUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutSeasonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    fixtures?: FixtureUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type StatisticUpsertWithWhereUniqueWithoutSeasonInput = {
    where: StatisticWhereUniqueInput
    update: XOR<StatisticUpdateWithoutSeasonInput, StatisticUncheckedUpdateWithoutSeasonInput>
    create: XOR<StatisticCreateWithoutSeasonInput, StatisticUncheckedCreateWithoutSeasonInput>
  }

  export type StatisticUpdateWithWhereUniqueWithoutSeasonInput = {
    where: StatisticWhereUniqueInput
    data: XOR<StatisticUpdateWithoutSeasonInput, StatisticUncheckedUpdateWithoutSeasonInput>
  }

  export type StatisticUpdateManyWithWhereWithoutSeasonInput = {
    where: StatisticScalarWhereInput
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyWithoutSeasonInput>
  }

  export type StatisticScalarWhereInput = {
    AND?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
    OR?: StatisticScalarWhereInput[]
    NOT?: StatisticScalarWhereInput | StatisticScalarWhereInput[]
    id?: IntFilter<"Statistic"> | number
    goals?: IntFilter<"Statistic"> | number
    assists?: IntFilter<"Statistic"> | number
    games?: IntFilter<"Statistic"> | number
    minutes?: IntFilter<"Statistic"> | number
    playerId?: IntFilter<"Statistic"> | number
    seasonId?: IntFilter<"Statistic"> | number
  }

  export type FixtureUpsertWithWhereUniqueWithoutSeasonInput = {
    where: FixtureWhereUniqueInput
    update: XOR<FixtureUpdateWithoutSeasonInput, FixtureUncheckedUpdateWithoutSeasonInput>
    create: XOR<FixtureCreateWithoutSeasonInput, FixtureUncheckedCreateWithoutSeasonInput>
  }

  export type FixtureUpdateWithWhereUniqueWithoutSeasonInput = {
    where: FixtureWhereUniqueInput
    data: XOR<FixtureUpdateWithoutSeasonInput, FixtureUncheckedUpdateWithoutSeasonInput>
  }

  export type FixtureUpdateManyWithWhereWithoutSeasonInput = {
    where: FixtureScalarWhereInput
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyWithoutSeasonInput>
  }

  export type CountryCreateWithoutTeamsInput = {
    name: string
    code?: string | null
    flag?: string | null
    leagues?: LeagueCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutTeamsInput = {
    id?: number
    name: string
    code?: string | null
    flag?: string | null
    leagues?: LeagueUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutTeamsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutTeamsInput, CountryUncheckedCreateWithoutTeamsInput>
  }

  export type StadiumCreateWithoutTeamsInput = {
    name: string
    city: string
    fixtures?: FixtureCreateNestedManyWithoutVenueInput
  }

  export type StadiumUncheckedCreateWithoutTeamsInput = {
    id?: number
    name: string
    city: string
    fixtures?: FixtureUncheckedCreateNestedManyWithoutVenueInput
  }

  export type StadiumCreateOrConnectWithoutTeamsInput = {
    where: StadiumWhereUniqueInput
    create: XOR<StadiumCreateWithoutTeamsInput, StadiumUncheckedCreateWithoutTeamsInput>
  }

  export type PlayerCreateWithoutTeamInput = {
    name: string
    age: number
    nationality: string
    position: string
    statistics?: StatisticCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    id?: number
    name: string
    age: number
    nationality: string
    position: string
    statistics?: StatisticUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: PlayerCreateManyTeamInput | PlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CoachCreateWithoutTeamInput = {
    name: string
    nationality: string
    teamId?: number | null
  }

  export type CoachUncheckedCreateWithoutTeamInput = {
    id?: number
    name: string
    nationality: string
    teamId?: number | null
  }

  export type CoachCreateOrConnectWithoutTeamInput = {
    where: CoachWhereUniqueInput
    create: XOR<CoachCreateWithoutTeamInput, CoachUncheckedCreateWithoutTeamInput>
  }

  export type FixtureCreateWithoutHomeTeamInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    venue: StadiumCreateNestedOneWithoutFixturesInput
    league: LeagueCreateNestedOneWithoutFixturesInput
    season: SeasonCreateNestedOneWithoutFixturesInput
    awayTeam: TeamCreateNestedOneWithoutAwayFixturesInput
  }

  export type FixtureUncheckedCreateWithoutHomeTeamInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateOrConnectWithoutHomeTeamInput = {
    where: FixtureWhereUniqueInput
    create: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput>
  }

  export type FixtureCreateManyHomeTeamInputEnvelope = {
    data: FixtureCreateManyHomeTeamInput | FixtureCreateManyHomeTeamInput[]
    skipDuplicates?: boolean
  }

  export type FixtureCreateWithoutAwayTeamInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    venue: StadiumCreateNestedOneWithoutFixturesInput
    league: LeagueCreateNestedOneWithoutFixturesInput
    season: SeasonCreateNestedOneWithoutFixturesInput
    homeTeam: TeamCreateNestedOneWithoutHomeFixturesInput
  }

  export type FixtureUncheckedCreateWithoutAwayTeamInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateOrConnectWithoutAwayTeamInput = {
    where: FixtureWhereUniqueInput
    create: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput>
  }

  export type FixtureCreateManyAwayTeamInputEnvelope = {
    data: FixtureCreateManyAwayTeamInput | FixtureCreateManyAwayTeamInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutTeamsInput = {
    update: XOR<CountryUpdateWithoutTeamsInput, CountryUncheckedUpdateWithoutTeamsInput>
    create: XOR<CountryCreateWithoutTeamsInput, CountryUncheckedCreateWithoutTeamsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutTeamsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutTeamsInput, CountryUncheckedUpdateWithoutTeamsInput>
  }

  export type CountryUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    leagues?: LeagueUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    leagues?: LeagueUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type StadiumUpsertWithoutTeamsInput = {
    update: XOR<StadiumUpdateWithoutTeamsInput, StadiumUncheckedUpdateWithoutTeamsInput>
    create: XOR<StadiumCreateWithoutTeamsInput, StadiumUncheckedCreateWithoutTeamsInput>
    where?: StadiumWhereInput
  }

  export type StadiumUpdateToOneWithWhereWithoutTeamsInput = {
    where?: StadiumWhereInput
    data: XOR<StadiumUpdateWithoutTeamsInput, StadiumUncheckedUpdateWithoutTeamsInput>
  }

  export type StadiumUpdateWithoutTeamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    fixtures?: FixtureUpdateManyWithoutVenueNestedInput
  }

  export type StadiumUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    fixtures?: FixtureUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    name?: StringFilter<"Player"> | string
    age?: IntFilter<"Player"> | number
    nationality?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
  }

  export type CoachUpsertWithoutTeamInput = {
    update: XOR<CoachUpdateWithoutTeamInput, CoachUncheckedUpdateWithoutTeamInput>
    create: XOR<CoachCreateWithoutTeamInput, CoachUncheckedCreateWithoutTeamInput>
    where?: CoachWhereInput
  }

  export type CoachUpdateToOneWithWhereWithoutTeamInput = {
    where?: CoachWhereInput
    data: XOR<CoachUpdateWithoutTeamInput, CoachUncheckedUpdateWithoutTeamInput>
  }

  export type CoachUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CoachUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUpsertWithWhereUniqueWithoutHomeTeamInput = {
    where: FixtureWhereUniqueInput
    update: XOR<FixtureUpdateWithoutHomeTeamInput, FixtureUncheckedUpdateWithoutHomeTeamInput>
    create: XOR<FixtureCreateWithoutHomeTeamInput, FixtureUncheckedCreateWithoutHomeTeamInput>
  }

  export type FixtureUpdateWithWhereUniqueWithoutHomeTeamInput = {
    where: FixtureWhereUniqueInput
    data: XOR<FixtureUpdateWithoutHomeTeamInput, FixtureUncheckedUpdateWithoutHomeTeamInput>
  }

  export type FixtureUpdateManyWithWhereWithoutHomeTeamInput = {
    where: FixtureScalarWhereInput
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyWithoutHomeTeamInput>
  }

  export type FixtureUpsertWithWhereUniqueWithoutAwayTeamInput = {
    where: FixtureWhereUniqueInput
    update: XOR<FixtureUpdateWithoutAwayTeamInput, FixtureUncheckedUpdateWithoutAwayTeamInput>
    create: XOR<FixtureCreateWithoutAwayTeamInput, FixtureUncheckedCreateWithoutAwayTeamInput>
  }

  export type FixtureUpdateWithWhereUniqueWithoutAwayTeamInput = {
    where: FixtureWhereUniqueInput
    data: XOR<FixtureUpdateWithoutAwayTeamInput, FixtureUncheckedUpdateWithoutAwayTeamInput>
  }

  export type FixtureUpdateManyWithWhereWithoutAwayTeamInput = {
    where: FixtureScalarWhereInput
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyWithoutAwayTeamInput>
  }

  export type TeamCreateWithoutCoachInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutCoachInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutCoachInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
  }

  export type TeamUpsertWithoutCoachInput = {
    update: XOR<TeamUpdateWithoutCoachInput, TeamUncheckedUpdateWithoutCoachInput>
    create: XOR<TeamCreateWithoutCoachInput, TeamUncheckedCreateWithoutCoachInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutCoachInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutCoachInput, TeamUncheckedUpdateWithoutCoachInput>
  }

  export type TeamUpdateWithoutCoachInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutCoachInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamCreateWithoutStadiumInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutStadiumInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    coachId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutStadiumInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput>
  }

  export type TeamCreateManyStadiumInputEnvelope = {
    data: TeamCreateManyStadiumInput | TeamCreateManyStadiumInput[]
    skipDuplicates?: boolean
  }

  export type FixtureCreateWithoutVenueInput = {
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
    league: LeagueCreateNestedOneWithoutFixturesInput
    season: SeasonCreateNestedOneWithoutFixturesInput
    homeTeam: TeamCreateNestedOneWithoutHomeFixturesInput
    awayTeam: TeamCreateNestedOneWithoutAwayFixturesInput
  }

  export type FixtureUncheckedCreateWithoutVenueInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateOrConnectWithoutVenueInput = {
    where: FixtureWhereUniqueInput
    create: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput>
  }

  export type FixtureCreateManyVenueInputEnvelope = {
    data: FixtureCreateManyVenueInput | FixtureCreateManyVenueInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithWhereUniqueWithoutStadiumInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutStadiumInput, TeamUncheckedUpdateWithoutStadiumInput>
    create: XOR<TeamCreateWithoutStadiumInput, TeamUncheckedCreateWithoutStadiumInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutStadiumInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutStadiumInput, TeamUncheckedUpdateWithoutStadiumInput>
  }

  export type TeamUpdateManyWithWhereWithoutStadiumInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutStadiumInput>
  }

  export type FixtureUpsertWithWhereUniqueWithoutVenueInput = {
    where: FixtureWhereUniqueInput
    update: XOR<FixtureUpdateWithoutVenueInput, FixtureUncheckedUpdateWithoutVenueInput>
    create: XOR<FixtureCreateWithoutVenueInput, FixtureUncheckedCreateWithoutVenueInput>
  }

  export type FixtureUpdateWithWhereUniqueWithoutVenueInput = {
    where: FixtureWhereUniqueInput
    data: XOR<FixtureUpdateWithoutVenueInput, FixtureUncheckedUpdateWithoutVenueInput>
  }

  export type FixtureUpdateManyWithWhereWithoutVenueInput = {
    where: FixtureScalarWhereInput
    data: XOR<FixtureUpdateManyMutationInput, FixtureUncheckedUpdateManyWithoutVenueInput>
  }

  export type TeamCreateWithoutPlayersInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutPlayersInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    coachId?: number | null
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutPlayersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type StatisticCreateWithoutPlayerInput = {
    goals: number
    assists: number
    games: number
    minutes: number
    season: SeasonCreateNestedOneWithoutStatisticsInput
  }

  export type StatisticUncheckedCreateWithoutPlayerInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    seasonId: number
  }

  export type StatisticCreateOrConnectWithoutPlayerInput = {
    where: StatisticWhereUniqueInput
    create: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput>
  }

  export type StatisticCreateManyPlayerInputEnvelope = {
    data: StatisticCreateManyPlayerInput | StatisticCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutPlayersInput = {
    update: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPlayersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type TeamUpdateWithoutPlayersInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type StatisticUpsertWithWhereUniqueWithoutPlayerInput = {
    where: StatisticWhereUniqueInput
    update: XOR<StatisticUpdateWithoutPlayerInput, StatisticUncheckedUpdateWithoutPlayerInput>
    create: XOR<StatisticCreateWithoutPlayerInput, StatisticUncheckedCreateWithoutPlayerInput>
  }

  export type StatisticUpdateWithWhereUniqueWithoutPlayerInput = {
    where: StatisticWhereUniqueInput
    data: XOR<StatisticUpdateWithoutPlayerInput, StatisticUncheckedUpdateWithoutPlayerInput>
  }

  export type StatisticUpdateManyWithWhereWithoutPlayerInput = {
    where: StatisticScalarWhereInput
    data: XOR<StatisticUpdateManyMutationInput, StatisticUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerCreateWithoutStatisticsInput = {
    name: string
    age: number
    nationality: string
    position: string
    team: TeamCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutStatisticsInput = {
    id?: number
    name: string
    age: number
    nationality: string
    position: string
    teamId: number
  }

  export type PlayerCreateOrConnectWithoutStatisticsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutStatisticsInput, PlayerUncheckedCreateWithoutStatisticsInput>
  }

  export type SeasonCreateWithoutStatisticsInput = {
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    league: LeagueCreateNestedOneWithoutSeasonsInput
    fixtures?: FixtureCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutStatisticsInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    leagueId: number
    fixtures?: FixtureUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutStatisticsInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutStatisticsInput, SeasonUncheckedCreateWithoutStatisticsInput>
  }

  export type PlayerUpsertWithoutStatisticsInput = {
    update: XOR<PlayerUpdateWithoutStatisticsInput, PlayerUncheckedUpdateWithoutStatisticsInput>
    create: XOR<PlayerCreateWithoutStatisticsInput, PlayerUncheckedCreateWithoutStatisticsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutStatisticsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutStatisticsInput, PlayerUncheckedUpdateWithoutStatisticsInput>
  }

  export type PlayerUpdateWithoutStatisticsInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutStatisticsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonUpsertWithoutStatisticsInput = {
    update: XOR<SeasonUpdateWithoutStatisticsInput, SeasonUncheckedUpdateWithoutStatisticsInput>
    create: XOR<SeasonCreateWithoutStatisticsInput, SeasonUncheckedCreateWithoutStatisticsInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutStatisticsInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutStatisticsInput, SeasonUncheckedUpdateWithoutStatisticsInput>
  }

  export type SeasonUpdateWithoutStatisticsInput = {
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    league?: LeagueUpdateOneRequiredWithoutSeasonsNestedInput
    fixtures?: FixtureUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutStatisticsInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    leagueId?: IntFieldUpdateOperationsInput | number
    fixtures?: FixtureUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type StadiumCreateWithoutFixturesInput = {
    name: string
    city: string
    teams?: TeamCreateNestedManyWithoutStadiumInput
  }

  export type StadiumUncheckedCreateWithoutFixturesInput = {
    id?: number
    name: string
    city: string
    teams?: TeamUncheckedCreateNestedManyWithoutStadiumInput
  }

  export type StadiumCreateOrConnectWithoutFixturesInput = {
    where: StadiumWhereUniqueInput
    create: XOR<StadiumCreateWithoutFixturesInput, StadiumUncheckedCreateWithoutFixturesInput>
  }

  export type LeagueCreateWithoutFixturesInput = {
    name: string
    type: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutLeaguesInput
    seasons?: SeasonCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutFixturesInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
    countryId: number
    seasons?: SeasonUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutFixturesInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutFixturesInput, LeagueUncheckedCreateWithoutFixturesInput>
  }

  export type SeasonCreateWithoutFixturesInput = {
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    league: LeagueCreateNestedOneWithoutSeasonsInput
    statistics?: StatisticCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutFixturesInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
    leagueId: number
    statistics?: StatisticUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutFixturesInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutFixturesInput, SeasonUncheckedCreateWithoutFixturesInput>
  }

  export type TeamCreateWithoutHomeFixturesInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    awayFixtures?: FixtureCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamUncheckedCreateWithoutHomeFixturesInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    coachId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    awayFixtures?: FixtureUncheckedCreateNestedManyWithoutAwayTeamInput
  }

  export type TeamCreateOrConnectWithoutHomeFixturesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutHomeFixturesInput, TeamUncheckedCreateWithoutHomeFixturesInput>
  }

  export type TeamCreateWithoutAwayFixturesInput = {
    name: string
    logo?: string | null
    country: CountryCreateNestedOneWithoutTeamsInput
    stadium?: StadiumCreateNestedOneWithoutTeamsInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    coach?: CoachCreateNestedOneWithoutTeamInput
    homeFixtures?: FixtureCreateNestedManyWithoutHomeTeamInput
  }

  export type TeamUncheckedCreateWithoutAwayFixturesInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    stadiumId?: number | null
    coachId?: number | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeFixtures?: FixtureUncheckedCreateNestedManyWithoutHomeTeamInput
  }

  export type TeamCreateOrConnectWithoutAwayFixturesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAwayFixturesInput, TeamUncheckedCreateWithoutAwayFixturesInput>
  }

  export type StadiumUpsertWithoutFixturesInput = {
    update: XOR<StadiumUpdateWithoutFixturesInput, StadiumUncheckedUpdateWithoutFixturesInput>
    create: XOR<StadiumCreateWithoutFixturesInput, StadiumUncheckedCreateWithoutFixturesInput>
    where?: StadiumWhereInput
  }

  export type StadiumUpdateToOneWithWhereWithoutFixturesInput = {
    where?: StadiumWhereInput
    data: XOR<StadiumUpdateWithoutFixturesInput, StadiumUncheckedUpdateWithoutFixturesInput>
  }

  export type StadiumUpdateWithoutFixturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    teams?: TeamUpdateManyWithoutStadiumNestedInput
  }

  export type StadiumUncheckedUpdateWithoutFixturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutStadiumNestedInput
  }

  export type LeagueUpsertWithoutFixturesInput = {
    update: XOR<LeagueUpdateWithoutFixturesInput, LeagueUncheckedUpdateWithoutFixturesInput>
    create: XOR<LeagueCreateWithoutFixturesInput, LeagueUncheckedCreateWithoutFixturesInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutFixturesInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutFixturesInput, LeagueUncheckedUpdateWithoutFixturesInput>
  }

  export type LeagueUpdateWithoutFixturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    seasons?: SeasonUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutFixturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    seasons?: SeasonUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type SeasonUpsertWithoutFixturesInput = {
    update: XOR<SeasonUpdateWithoutFixturesInput, SeasonUncheckedUpdateWithoutFixturesInput>
    create: XOR<SeasonCreateWithoutFixturesInput, SeasonUncheckedCreateWithoutFixturesInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutFixturesInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutFixturesInput, SeasonUncheckedUpdateWithoutFixturesInput>
  }

  export type SeasonUpdateWithoutFixturesInput = {
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    league?: LeagueUpdateOneRequiredWithoutSeasonsNestedInput
    statistics?: StatisticUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutFixturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    leagueId?: IntFieldUpdateOperationsInput | number
    statistics?: StatisticUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type TeamUpsertWithoutHomeFixturesInput = {
    update: XOR<TeamUpdateWithoutHomeFixturesInput, TeamUncheckedUpdateWithoutHomeFixturesInput>
    create: XOR<TeamCreateWithoutHomeFixturesInput, TeamUncheckedCreateWithoutHomeFixturesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutHomeFixturesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutHomeFixturesInput, TeamUncheckedUpdateWithoutHomeFixturesInput>
  }

  export type TeamUpdateWithoutHomeFixturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutHomeFixturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUpsertWithoutAwayFixturesInput = {
    update: XOR<TeamUpdateWithoutAwayFixturesInput, TeamUncheckedUpdateWithoutAwayFixturesInput>
    create: XOR<TeamCreateWithoutAwayFixturesInput, TeamUncheckedCreateWithoutAwayFixturesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutAwayFixturesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutAwayFixturesInput, TeamUncheckedUpdateWithoutAwayFixturesInput>
  }

  export type TeamUpdateWithoutAwayFixturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutAwayFixturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
  }

  export type LeagueCreateManyCountryInput = {
    id?: number
    name: string
    type: string
    logo?: string | null
  }

  export type TeamCreateManyCountryInput = {
    id?: number
    name: string
    logo?: string | null
    stadiumId?: number | null
    coachId?: number | null
  }

  export type LeagueUpdateWithoutCountryInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    seasons?: SeasonUpdateManyWithoutLeagueNestedInput
    fixtures?: FixtureUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    seasons?: SeasonUncheckedUpdateManyWithoutLeagueNestedInput
    fixtures?: FixtureUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUpdateWithoutCountryInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    stadium?: StadiumUpdateOneWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    stadiumId?: NullableIntFieldUpdateOperationsInput | number | null
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SeasonCreateManyLeagueInput = {
    id?: number
    year: number
    start: Date | string
    end: Date | string
    current: boolean
  }

  export type FixtureCreateManyLeagueInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type SeasonUpdateWithoutLeagueInput = {
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    statistics?: StatisticUpdateManyWithoutSeasonNestedInput
    fixtures?: FixtureUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
    statistics?: StatisticUncheckedUpdateManyWithoutSeasonNestedInput
    fixtures?: FixtureUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateManyWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    current?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FixtureUpdateWithoutLeagueInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    venue?: StadiumUpdateOneRequiredWithoutFixturesNestedInput
    season?: SeasonUpdateOneRequiredWithoutFixturesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeFixturesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayFixturesNestedInput
  }

  export type FixtureUncheckedUpdateWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyWithoutLeagueInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StatisticCreateManySeasonInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    playerId: number
  }

  export type FixtureCreateManySeasonInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type StatisticUpdateWithoutSeasonInput = {
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    player?: PlayerUpdateOneRequiredWithoutStatisticsNestedInput
  }

  export type StatisticUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticUncheckedUpdateManyWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
  }

  export type FixtureUpdateWithoutSeasonInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    venue?: StadiumUpdateOneRequiredWithoutFixturesNestedInput
    league?: LeagueUpdateOneRequiredWithoutFixturesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeFixturesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayFixturesNestedInput
  }

  export type FixtureUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerCreateManyTeamInput = {
    id?: number
    name: string
    age: number
    nationality: string
    position: string
  }

  export type FixtureCreateManyHomeTeamInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type FixtureCreateManyAwayTeamInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    venueId: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type PlayerUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    statistics?: StatisticUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    statistics?: StatisticUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    nationality?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type FixtureUpdateWithoutHomeTeamInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    venue?: StadiumUpdateOneRequiredWithoutFixturesNestedInput
    league?: LeagueUpdateOneRequiredWithoutFixturesNestedInput
    season?: SeasonUpdateOneRequiredWithoutFixturesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayFixturesNestedInput
  }

  export type FixtureUncheckedUpdateWithoutHomeTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyWithoutHomeTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUpdateWithoutAwayTeamInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    venue?: StadiumUpdateOneRequiredWithoutFixturesNestedInput
    league?: LeagueUpdateOneRequiredWithoutFixturesNestedInput
    season?: SeasonUpdateOneRequiredWithoutFixturesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeFixturesNestedInput
  }

  export type FixtureUncheckedUpdateWithoutAwayTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyWithoutAwayTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamCreateManyStadiumInput = {
    id?: number
    name: string
    logo?: string | null
    countryId: number
    coachId?: number | null
  }

  export type FixtureCreateManyVenueInput = {
    id?: number
    fixtureId: number
    referee?: string | null
    timezone: string
    date: Date | string
    timestamp: number
    status: string
    elapsed: number
    leagueId: number
    seasonId: number
    homeTeamId: number
    awayTeamId: number
    goalsHome?: number | null
    goalsAway?: number | null
    halftimeHome?: number | null
    halftimeAway?: number | null
    fulltimeHome?: number | null
    fulltimeAway?: number | null
    extratimeHome?: number | null
    extratimeAway?: number | null
    penaltyHome?: number | null
    penaltyAway?: number | null
  }

  export type TeamUpdateWithoutStadiumInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    country?: CountryUpdateOneRequiredWithoutTeamsNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    coach?: CoachUpdateOneWithoutTeamNestedInput
    homeFixtures?: FixtureUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutStadiumInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeFixtures?: FixtureUncheckedUpdateManyWithoutHomeTeamNestedInput
    awayFixtures?: FixtureUncheckedUpdateManyWithoutAwayTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutStadiumInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    countryId?: IntFieldUpdateOperationsInput | number
    coachId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUpdateWithoutVenueInput = {
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
    league?: LeagueUpdateOneRequiredWithoutFixturesNestedInput
    season?: SeasonUpdateOneRequiredWithoutFixturesNestedInput
    homeTeam?: TeamUpdateOneRequiredWithoutHomeFixturesNestedInput
    awayTeam?: TeamUpdateOneRequiredWithoutAwayFixturesNestedInput
  }

  export type FixtureUncheckedUpdateWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FixtureUncheckedUpdateManyWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    fixtureId?: IntFieldUpdateOperationsInput | number
    referee?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    elapsed?: IntFieldUpdateOperationsInput | number
    leagueId?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
    homeTeamId?: IntFieldUpdateOperationsInput | number
    awayTeamId?: IntFieldUpdateOperationsInput | number
    goalsHome?: NullableIntFieldUpdateOperationsInput | number | null
    goalsAway?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    halftimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    fulltimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeHome?: NullableIntFieldUpdateOperationsInput | number | null
    extratimeAway?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyHome?: NullableIntFieldUpdateOperationsInput | number | null
    penaltyAway?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StatisticCreateManyPlayerInput = {
    id?: number
    goals: number
    assists: number
    games: number
    minutes: number
    seasonId: number
  }

  export type StatisticUpdateWithoutPlayerInput = {
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    season?: SeasonUpdateOneRequiredWithoutStatisticsNestedInput
  }

  export type StatisticUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    goals?: IntFieldUpdateOperationsInput | number
    assists?: IntFieldUpdateOperationsInput | number
    games?: IntFieldUpdateOperationsInput | number
    minutes?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CountryCountOutputTypeDefaultArgs instead
     */
    export type CountryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueCountOutputTypeDefaultArgs instead
     */
    export type LeagueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonCountOutputTypeDefaultArgs instead
     */
    export type SeasonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StadiumCountOutputTypeDefaultArgs instead
     */
    export type StadiumCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StadiumCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryDefaultArgs instead
     */
    export type CountryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeagueDefaultArgs instead
     */
    export type LeagueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeagueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonDefaultArgs instead
     */
    export type SeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoachDefaultArgs instead
     */
    export type CoachArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoachDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StadiumDefaultArgs instead
     */
    export type StadiumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StadiumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatisticDefaultArgs instead
     */
    export type StatisticArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatisticDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FixtureDefaultArgs instead
     */
    export type FixtureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FixtureDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}